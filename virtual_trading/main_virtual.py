# virtual_trading/main_virtual.py
"""
–ó–∞–ø—É—Å–∫ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ V2 —Å –º–æ–¥—É–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É: models/ + services/ + core/

–ó–ê–ü–£–°–ö: 
  python -m virtual_trading.main_virtual
  –∏–ª–∏
  cd virtual_trading && python main_virtual.py
"""

import asyncio
import logging
import time
import signal
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from config.logging_config import setup_logging
logger = setup_logging()

# –û—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
from config import SYMBOLS, INTERVAL_SEC
from core import BybitFuturesAPI
from core.trading_engine import HybridTradingEngineV2
from utils import display_startup_info

# üÜï –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
from .core.virtual_trader_v2 import VirtualTraderV2

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
virtual_trader = None
is_running = True

def setup_signal_handlers():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    def signal_handler(signum, frame):
        global is_running
        print(f"\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {signum}")
        logger.warning(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è {signum}")
        is_running = False
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
        if virtual_trader:
            print("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            try:
                final_file = virtual_trader.save_results()
                if final_file:
                    print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {final_file}")
                else:
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –ü–µ—á–∞—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                virtual_trader.print_final_report()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
        
        print("üëã –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

async def run_virtual_trader():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞"""
    global virtual_trader, is_running
    
    print("ü§ñ –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –¢–†–ï–ô–î–ï–† V2 - –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê")
    print("=" * 70)
    print("üéØ –†–µ–∂–∏–º: –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å timing")
    print("üìã –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:")
    print("   ‚Ä¢ models/ - VirtualPosition, ClosedTrade")
    print("   ‚Ä¢ services/ - BalanceManager, PositionManager, Statistics, Reports")
    print("   ‚Ä¢ core/ - VirtualTraderV2 (–≥–ª–∞–≤–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä)")
    print("   ‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å timing —Å–∏—Å—Ç–µ–º–æ–π")
    print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("=" * 70)
    
    display_startup_info()
    
    # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –º–æ–¥—É–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    print("\nüíº –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –¢–†–ï–ô–î–ï–†–ê V2")
    print("=" * 60)
    
    virtual_trader = VirtualTraderV2(
        initial_balance=10000.0,      # $10,000 —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        position_size_percent=2.0,    # 2% –Ω–∞ –ø–æ–∑–∏—Ü–∏—é
        max_exposure_percent=20.0     # –ú–∞–∫—Å–∏–º—É–º 20% —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è
    )
    
    print(f"üí∞ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${virtual_trader.initial_balance:,.2f}")
    print(f"üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {virtual_trader.balance_manager.position_size_percent}% (${virtual_trader.balance_manager.position_size_usd:,.0f})")
    print(f"üõ°Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–∫—Å–ø–æ–∑–∏—Ü–∏—è: {virtual_trader.balance_manager.max_exposure_percent}%")
    print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {virtual_trader.results_dir}/")
    print("‚úÖ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print("=" * 60)
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫
    print("\nüîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞...")
    
    async with BybitFuturesAPI() as api:
        print("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        logger.info("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        engine = HybridTradingEngineV2(api)
        print("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å timing –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        logger.info("‚úÖ –¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å timing –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é...")
        print(f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {len(SYMBOLS)}")
        print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {INTERVAL_SEC} —Å–µ–∫")
        print(f"üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        print("=" * 70)
        
        cycle_count = 0
        total_signals_generated = 0
        total_entries_executed = 0
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        while is_running:
            try:
                cycle_count += 1
                start_time = time.time()
                
                logger.info(f"\n{'='*70}")
                logger.info(f"üîç –¶–∏–∫–ª #{cycle_count}: –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å timing (–º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)")
                logger.info(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –§–ê–ó–ê 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ timing —Å–∏—Å—Ç–µ–º—É)
                new_signals = await engine.analyze_and_generate_signals(SYMBOLS)
                
                if new_signals:
                    total_signals_generated += len(new_signals)
                    virtual_trader.total_signals += len(new_signals)
                    
                    logger.info(f"üìä –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ timing –æ—á–µ—Ä–µ–¥—å: {len(new_signals)}")
                    print(f"üìä –¶–∏–∫–ª {cycle_count}: –ù–∞–π–¥–µ–Ω–æ {len(new_signals)} –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è timing")
                    
                    for signal_info in new_signals:
                        signal = signal_info['signal']
                        timing_strategy = signal_info['timing_strategy']
                        
                        logger.info(f"‚è≥ {signal['symbol']} {signal['direction']} "
                                   f"(—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {timing_strategy}, "
                                   f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 0):.1%})")
                
                # –§–ê–ó–ê 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—Ö–æ–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤
                ready_entries = await engine.check_ready_entries()
                
                if ready_entries:
                    total_entries_executed += len(ready_entries)
                    logger.info(f"üéØ –ì–æ—Ç–æ–≤—ã—Ö –∫ –≤—Ö–æ–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤: {len(ready_entries)}")
                    print(f"üéØ –ì–æ—Ç–æ–≤—ã—Ö –∫ –≤—Ö–æ–¥—É: {len(ready_entries)}")
                    
                    for entry_signal in ready_entries:
                        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –º–æ–¥—É–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
                        try:
                            await virtual_trader.open_virtual_position(entry_signal)
                            print(f"üìà {entry_signal['symbol']} {entry_signal['direction'].upper()} "
                                  f"–¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)")
                        except Exception as vt_error:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ {entry_signal['symbol']}: {vt_error}")
                            print(f"‚ùå –û—à–∏–±–∫–∞: {entry_signal['symbol']} - {vt_error}")
                
                # –§–ê–ó–ê 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
                if virtual_trader.open_positions:
                    logger.debug(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ {len(virtual_trader.open_positions)} –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π...")
                    await virtual_trader.check_position_exits(api)
                
                # –§–ê–ó–ê 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
                await virtual_trader.log_status(api, engine)
                
                # –§–ê–ó–ê 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ timing —Å–∏—Å—Ç–µ–º—ã
                timing_status = engine.get_timing_status()
                pending_count = len(timing_status.get('pending_entries', []))
                
                # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
                cycle_time = time.time() - start_time
                
                logger.info(f"\nüìä –¶–ò–ö–õ #{cycle_count} –ó–ê–í–ï–†–®–ï–ù:")
                logger.info(f"   üîç –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(new_signals)}")
                logger.info(f"   üéØ –ì–æ—Ç–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤: {len(ready_entries)}")
                logger.info(f"   ‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤: {pending_count}")
                logger.info(f"   üíº –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {len(virtual_trader.open_positions)}")
                logger.info(f"   üìà –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {len(virtual_trader.closed_trades)}")
                logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ü–∏–∫–ª–∞: {cycle_time:.1f} —Å–µ–∫")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∫–∞–∂–¥—ã–µ 20 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 20 == 0:
                    print(f"\nüìã –î–ï–¢–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ (—Ü–∏–∫–ª {cycle_count}):")
                    print("=" * 50)
                    
                    # –°—Ç–∞—Ç—É—Å timing
                    if pending_count > 0:
                        print(f"‚è≥ –û–ñ–ò–î–ê–Æ–©–ò–ï –í–•–û–î–´ ({pending_count}):")
                        for entry in timing_status.get('pending_entries', []):
                            print(f"   {entry['symbol']} {entry['direction'].upper()} "
                                  f"| {entry['timing_type']} "
                                  f"| –ñ–¥–µ–º: {entry['time_waiting']} "
                                  f"| –ü–æ–¥—Ç–≤.: {entry['confirmations']}")
                    else:
                        print("‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö timing –≤—Ö–æ–¥–æ–≤ –Ω–µ—Ç")
                    
                    # –°—Ç–∞—Ç—É—Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞ (–Ω–æ–≤–∞—è –º–æ–¥—É–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)
                    if len(virtual_trader.closed_trades) > 0:
                        stats = virtual_trader.calculate_statistics()
                        
                        print(f"\nüíº –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –ü–û–†–¢–§–ï–õ–¨ (–ú–û–î–£–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê):")
                        print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: ${stats['current_balance']:,.2f} ({stats['balance_percent']:+.2f}%)")
                        print(f"   üìä –°–¥–µ–ª–æ–∫: {stats['total_trades']} (–≤–∏–Ω—Ä–µ–π—Ç: {stats['win_rate']:.1f}%)")
                        print(f"   üìç –ü–æ–∑–∏—Ü–∏–π: {len(virtual_trader.open_positions)}")
                        print(f"   ‚è∞ Timing –≤—Ö–æ–¥–æ–≤: {stats['timing_analysis']['entries_from_timing']}")
                        print(f"   ‚ö° –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: {stats['timing_analysis']['immediate_entries']}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
                        balance_summary = virtual_trader.get_balance_summary()
                        positions_summary = virtual_trader.get_positions_summary()
                        trades_summary = virtual_trader.get_trades_summary()
                        
                        print(f"\nüîß –ú–û–î–£–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
                        print(f"   BalanceManager: –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è {balance_summary['exposure_percent']:.1f}%")
                        print(f"   PositionManager: {positions_summary['total_positions']} –ø–æ–∑–∏—Ü–∏–π")
                        print(f"   StatisticsCalculator: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(virtual_trader.statistics_calculator.session_history)} –∑–∞–ø–∏—Å–µ–π")
                        print(f"   ReportGenerator: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ {virtual_trader.report_generator.results_dir}/")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–¥–µ–ª–∫–∏
                        if virtual_trader.closed_trades:
                            print(f"\nüìù –ü–û–°–õ–ï–î–ù–ò–ï 3 –°–î–ï–õ–ö–ò:")
                            for trade in virtual_trader.closed_trades[-3:]:
                                profit_emoji = "üíö" if trade.pnl_usd > 0 else "‚ù§Ô∏è"
                                timing_type = trade.timing_info.get('timing_type', 'immediate') if trade.timing_info else 'immediate'
                                print(f"   {profit_emoji} {trade.symbol} {trade.direction.upper()} "
                                      f"{trade.pnl_percent:+.1f}% (${trade.pnl_usd:+.2f}) "
                                      f"{trade.exit_reason} [{timing_type}]")
                    else:
                        print(f"\nüíº –í–ò–†–¢–£–ê–õ–¨–ù–´–ô –ü–û–†–¢–§–ï–õ–¨: –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫")
                        print(f"üîß –ú–û–î–£–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê: –ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
                    
                    print("=" * 50)
                
                # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 60 == 0:
                    logger.info("üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...")
                    try:
                        virtual_trader.save_results()
                        print(f"üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Ü–∏–∫–ª {cycle_count})")
                    except Exception as save_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {save_error}")
                
                logger.info(f"{'='*70}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(INTERVAL_SEC)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞: {str(e)}")
                await asyncio.sleep(30)  # –ü–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        setup_signal_handlers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞
        await run_virtual_trader()
        
    except KeyboardInterrupt:
        print("\nüëã –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º —Ç—Ä–µ–π–¥–µ—Ä–µ")
    finally:
        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if virtual_trader:
            print("\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
            try:
                final_file = virtual_trader.save_results()
                if final_file:
                    print(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
                    print(f"üìÅ –§–∞–π–ª: {final_file}")
                
                # –ü–µ—á–∞—Ç–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
                virtual_trader.print_final_report()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                logger.error(f"–û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        
        print("üëã –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö –í–ò–†–¢–£–ê–õ–¨–ù–û–ì–û –¢–†–ï–ô–î–ï–†–ê V2 (–ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê)")
    print("üéØ models/ + services/ + core/ = –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print()
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        logging.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–µ—Ä–∞")