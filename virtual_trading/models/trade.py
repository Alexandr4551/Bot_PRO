# virtual_trading/models/trade.py
"""
–ú–æ–¥–µ–ª—å –∑–∞–∫—Ä—ã—Ç–æ–π —Å–¥–µ–ª–∫–∏ —Å timing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
"""

from dataclasses import dataclass
from datetime import datetime
from typing import Optional, Dict

@dataclass
class ClosedTrade:
    """–ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞ —Å timing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    symbol: str
    direction: str
    entry_price: float
    entry_time: datetime
    exit_price: float
    exit_time: datetime
    exit_reason: str
    position_size_usd: float
    quantity_closed: float
    pnl_usd: float
    pnl_percent: float
    duration_minutes: int
    timing_info: dict = None
    
    def __post_init__(self):
        if self.timing_info is None:
            self.timing_info = {}
    
    def is_profitable(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±—ã–ª–∞ –ª–∏ —Å–¥–µ–ª–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ–π"""
        return self.pnl_usd > 0
    
    def get_risk_reward_ratio(self) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ R/R —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ"""
        if self.exit_reason == 'Stop Loss':
            return 0.0
        
        # –î–ª—è TP —Å–¥–µ–ª–æ–∫ –ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å R/R
        entry_price = self.entry_price
        exit_price = self.exit_price
        
        if self.direction == 'buy':
            reward = exit_price - entry_price
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º SL –Ω–∞ 1-3% –Ω–∏–∂–µ –≤—Ö–æ–¥–∞
            estimated_risk = entry_price * 0.02  # 2% –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ä–∏—Å–∫
        else:
            reward = entry_price - exit_price  
            estimated_risk = entry_price * 0.02
        
        return reward / estimated_risk if estimated_risk > 0 else 0.0
    
    def get_duration_hours(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∫–∏ –≤ —á–∞—Å–∞—Ö"""
        return self.duration_minutes / 60.0
    
    def get_exit_type(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –≤—ã—Ö–æ–¥–∞"""
        if 'TP1' in self.exit_reason:
            return 'TP1'
        elif 'TP2' in self.exit_reason:
            return 'TP2'
        elif 'TP3' in self.exit_reason:
            return 'TP3'
        elif 'Stop Loss' in self.exit_reason:
            return 'SL'
        else:
            return 'Other'
    
    def get_timing_type(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø timing –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è –≤—Ö–æ–¥–∞"""
        if not self.timing_info:
            return 'immediate'
        return self.timing_info.get('timing_type', 'unknown')
    
    def get_wait_time(self) -> float:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ö–æ–¥–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        if not self.timing_info:
            return 0.0
        return self.timing_info.get('wait_time_minutes', 0.0)
    
    def format_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏"""
        profit_emoji = "üíö" if self.is_profitable() else "‚ù§Ô∏è"
        timing_type = self.get_timing_type()
        
        return (f"{profit_emoji} {self.symbol} {self.direction.upper()} "
                f"{self.pnl_percent:+.1f}% (${self.pnl_usd:+.2f}) "
                f"{self.get_exit_type()} [{timing_type}]")
    
    def to_dict(self) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–¥–µ–ª–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è"""
        return {
            'symbol': self.symbol,
            'direction': self.direction,
            'entry_price': self.entry_price,
            'entry_time': self.entry_time.isoformat() if isinstance(self.entry_time, datetime) else str(self.entry_time),
            'exit_price': self.exit_price,
            'exit_time': self.exit_time.isoformat() if isinstance(self.exit_time, datetime) else str(self.exit_time),
            'exit_reason': self.exit_reason,
            'position_size_usd': self.position_size_usd,
            'quantity_closed': self.quantity_closed,
            'pnl_usd': self.pnl_usd,
            'pnl_percent': self.pnl_percent,
            'duration_minutes': self.duration_minutes,
            'timing_info': self.timing_info,
            'risk_reward': self.get_risk_reward_ratio(),
            'timing_type': self.get_timing_type(),
            'wait_time_minutes': self.get_wait_time()
        }