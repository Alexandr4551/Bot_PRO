# utils/telegram_bot.py
"""
–£–ª—É—á—à–µ–Ω–Ω—ã–π Telegram –±–æ—Ç - —Ç–æ–ª—å–∫–æ —Å–∏–≥–Ω–∞–ª—ã, –±–µ–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
"""

import asyncio
import aiohttp
import logging
from datetime import datetime

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
try:
    from config import ANTISPAM_CONFIG
except ImportError:
    # Fallback –µ—Å–ª–∏ config –Ω–µ –Ω–∞–π–¥–µ–Ω
    ANTISPAM_CONFIG = {
        'MIN_RR_RATIO': 1.5,
        'TARGET_RR_RATIO': 2.5
    }

logger = logging.getLogger(__name__)

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ Telegram"""
    
    def __init__(self, bot_token=None, chat_id=None):
        self.bot_token = bot_token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{bot_token}" if bot_token else None
        self.session = None
        self.enabled = bool(bot_token and chat_id)
        
        if self.enabled:
            logger.info("‚úÖ Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω (—Ä–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã)")
        else:
            logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ª–æ–≥–∏)")
    
    async def __aenter__(self):
        if self.enabled:
            self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc, tb):
        if self.session:
            await self.session.close()
    
    async def send_message(self, text, parse_mode="HTML"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.enabled:
            logger.debug("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –≤ –ª–æ–≥–∏")
            return True
        
        if not self.session:
            logger.error("Telegram —Å–µ—Å—Å–∏—è –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return False
        
        url = f"{self.base_url}/sendMessage"
        data = {
            "chat_id": self.chat_id,
            "text": text,
            "parse_mode": parse_mode,
            "disable_web_page_preview": True
        }
        
        try:
            async with self.session.post(url, json=data) as response:
                if response.status == 200:
                    logger.debug("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    return True
                else:
                    result = await response.json()
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram API: {result}")
                    return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {str(e)}")
            return False
    
    def format_high_quality_signal(self, signal):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è Telegram"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –∏ —Ü–≤–µ—Ç
        if signal['direction'] == 'buy':
            direction_emoji = "üü¢"
            direction_text = "–ü–û–ö–£–ü–ö–ê"
            color_emoji = "üìà"
        else:
            direction_emoji = "üî¥" 
            direction_text = "–ü–†–û–î–ê–ñ–ê"
            color_emoji = "üìâ"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ
        message = f"""
{direction_emoji} <b>–í–´–°–û–ö–û–ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ô –°–ò–ì–ù–ê–õ</b>

{color_emoji} <b>{signal['symbol']}</b> - {direction_text}

üí∞ <b>–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞:</b> ${signal['price']:.5f}
üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {signal['confidence']:.1%}
üèÜ <b>–¢–∏–ø:</b> {self._get_signal_type_description(signal['signal_type'])}

"""
        
        # –ê–Ω–∞–ª–∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º
        if signal.get('ml_prediction'):
            ml = signal['ml_prediction']
            message += f"ü§ñ <b>ML –∞–Ω–∞–ª–∏–∑:</b> {ml['prediction_name']} ({ml['confidence']:.1%})\n"
        
        tech = signal['technical_signal']
        message += f"üìä <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑:</b> –°–∏–ª–∞ {tech['strength']:.1%}, RSI {tech['rsi']:.1f}\n"
        message += f"üìà <b>–¢—Ä–µ–Ω–¥:</b> {self._format_trend_strength(tech['trend'])}\n\n"
        
        # –¢–æ—Ä–≥–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if 'take_profit' in signal:
            message += f"üéØ <b>–¶–µ–ª–∏ –ø—Ä–∏–±—ã–ª–∏:</b>\n"
            message += f"   ü•â TP1: <code>${signal['take_profit'][0]:.5f}</code> (R/R 1:{ANTISPAM_CONFIG['MIN_RR_RATIO']})\n"
            message += f"   ü•à TP2: <code>${signal['take_profit'][1]:.5f}</code>\n"
            message += f"   ü•á TP3: <code>${signal['take_profit'][2]:.5f}</code> (R/R 1:{ANTISPAM_CONFIG['TARGET_RR_RATIO']})\n\n"
            
            message += f"üõ°Ô∏è <b>–°—Ç–æ–ø-–ª–æ—Å—Å:</b> <code>${signal['stop_loss']:.5f}</code>\n"
            message += f"‚öñÔ∏è <b>Risk/Reward:</b> 1:{signal['risk_reward']:.2f}\n"
            message += f"üí∏ <b>–†–∏—Å–∫ –ø–æ–∑–∏—Ü–∏–∏:</b> {signal['risk_percent']:.1f}%\n\n"
        
        # –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞
        if signal.get('reasoning'):
            message += f"üí≠ <b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ:</b>\n"
            for reason in signal['reasoning']:
                message += f"   ‚Ä¢ {reason}\n"
            message += "\n"
        
        # –í—Ä–µ–º—è –∏ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
        message += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}\n"
        message += f"üî• <i>–í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è!</i>"
        
        return message
    
    def _get_signal_type_description(self, signal_type):
        """–û–ø–∏—Å–∞–Ω–∏–µ —Ç–∏–ø–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        descriptions = {
            'high_quality_consensus': 'ü§ù ML + –¢–ê —Å–æ–≥–ª–∞—Å–∏–µ',
            'high_quality_technical': 'üìä –ú–æ—â–Ω—ã–π —Ç–µ—Ö–∞–Ω–∞–ª–∏–∑',
            'ml_technical_agree': 'ü§ñüìä –ü–æ–ª–Ω–æ–µ —Å–æ–≥–ª–∞—Å–∏–µ',
            'ml_dominant': 'ü§ñ ML –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç'
        }
        return descriptions.get(signal_type, signal_type)
    
    def _format_trend_strength(self, trend_strength):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–ª—ã —Ç—Ä–µ–Ω–¥–∞"""
        if trend_strength >= 2.0:
            return "üî• –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π"
        elif trend_strength >= 1.0:
            return "üìà –°–∏–ª—å–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π"
        elif trend_strength > 0:
            return "‚¨ÜÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –≤–æ—Å—Ö–æ–¥—è—â–∏–π"
        elif trend_strength <= -2.0:
            return "‚ùÑÔ∏è –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π"
        elif trend_strength <= -1.0:
            return "üìâ –°–∏–ª—å–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π"
        elif trend_strength < 0:
            return "‚¨áÔ∏è –£–º–µ—Ä–µ–Ω–Ω—ã–π –Ω–∏—Å—Ö–æ–¥—è—â–∏–π"
        else:
            return "‚û°Ô∏è –ë–æ–∫–æ–≤–æ–π"
    
    async def send_signal(self, signal):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞"""
        try:
            message = self.format_high_quality_signal(signal)
            return await self.send_message(message)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
            return False
    
    async def send_startup_message(self):
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∂–∏–º–µ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞"""
        message = """
üöÄ <b>–°–∏—Å—Ç–µ–º–∞ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω–∞!</b>

üéØ <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b> –ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ
ü§ñ ML –º–æ–¥–µ–ª—å: –ê–∫—Ç–∏–≤–Ω–∞
üìä –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑: –ê–∫—Ç–∏–≤–µ–Ω
üîí <b>–§–∏–ª—å—Ç—Ä:</b> –¢–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã 90%+

‚ö° <b>–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ç–±–æ—Ä–∞:</b>
   ‚Ä¢ ML + –¢–ê –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
   ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ‚â• 90%
   ‚Ä¢ –°–∏–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ R/R —É—Ä–æ–≤–Ω–∏

üèÜ <i>–û–∂–∏–¥–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ –ª—É—á—à–∏–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!</i>
"""
        return await self.send_message(message)
    
    async def send_system_message(self, title, text, emoji="‚ÑπÔ∏è"):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—à–∏–±–∫–∏, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)"""
        message = f"""
{emoji} <b>{title}</b>

{text}

‚è∞ {datetime.now().strftime('%H:%M:%S')}
"""
        return await self.send_message(message)
    
    async def test_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
        if not self.enabled:
            logger.info("Telegram –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return False
        
        test_message = """
üß™ <b>–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤</b>

‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram: OK
üîß –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ

<i>–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!</i>
"""
        result = await self.send_message(test_message)
        
        if result:
            logger.info("‚úÖ Telegram –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.error("‚ùå Telegram –±–æ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return result

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
def create_telegram_bot():
    """–°–æ–∑–¥–∞–Ω–∏–µ Telegram –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    import os
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bot_token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑ config
    if not bot_token or not chat_id:
        try:
            from config.telegram_config import TELEGRAM_CONFIG
            bot_token = TELEGRAM_CONFIG.get('BOT_TOKEN')
            chat_id = TELEGRAM_CONFIG.get('CHAT_ID')
        except ImportError:
            logger.debug("–§–∞–π–ª telegram_config.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return TelegramBot(bot_token, chat_id)