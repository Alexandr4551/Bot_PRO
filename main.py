# main_v2.py - –°–ò–°–¢–ï–ú–ê –° –£–õ–£–ß–®–ï–ù–ù–´–ú TIMING
"""
–°–∏—Å—Ç–µ–º–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –£–ú–ù–´–ú TIMING –í–•–û–î–ê
–≠–¢–ê–ü 1.2: –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ +15% –∫ –≤–∏–Ω—Ä–µ–π—Ç—É
"""

import asyncio
import logging
import time
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è  
from config.logging_config import setup_logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å –£–õ–£–ß–®–ï–ù–ù–´–ú TIMING...")
print("üéØ –†–µ–∂–∏–º: –£–º–Ω—ã–π timing –≤—Ö–æ–¥–∞ - –∂–¥–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã")
print("üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π...")

# –ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from config import SYMBOLS, INTERVAL_SEC
from core import BybitFuturesAPI
from core.trading_engine import HybridTradingEngineV2  # –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è —Å timing
from utils import display_signal, display_startup_info

print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

# –ò–º–ø–æ—Ä—Ç Telegram –º–æ–¥—É–ª—è
try:
    from utils.telegram_bot import create_telegram_bot
    print("‚úÖ Telegram –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω")
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Telegram –º–æ–¥—É–ª—è: {e}")
    create_telegram_bot = None

async def main_loop_v2():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏—Å—Ç–µ–º—ã —Å timing"""
    print("=" * 70)
    print("üéØ –°–ò–°–¢–ï–ú–ê –° –£–õ–£–ß–®–ï–ù–ù–´–ú TIMING –í–•–û–î–ê")
    print("=" * 70)
    print("üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
    print("   ‚Ä¢ Pullback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –∂–¥–µ–º –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞")
    print("   ‚Ä¢ –ú–∏–∫—Ä–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º")
    print("   ‚Ä¢ Breakout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –æ–±—ä–µ–º–æ–º")
    print("   ‚Ä¢ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π timing –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤")
    print("   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ timing")
    print("=" * 70)
    
    display_startup_info()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
    print("\nü§ñ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø TELEGRAM –ë–û–¢–ê")
    print("=" * 50)
    
    if create_telegram_bot is None:
        print("‚ùå Telegram –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω!")
        telegram_bot = None
        telegram_enabled = False
    else:
        print("üîÑ –°–æ–∑–¥–∞–µ–º Telegram –±–æ—Ç–∞...")
        telegram_bot = create_telegram_bot()
        telegram_enabled = telegram_bot.enabled if telegram_bot else False
        
        print(f"üì± Telegram –±–æ—Ç —Å–æ–∑–¥–∞–Ω: enabled={telegram_enabled}")
        
        if telegram_enabled:
            print(f"üîë –¢–æ–∫–µ–Ω: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print(f"üí¨ Chat ID: {telegram_bot.chat_id}")
        else:
            print("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω (–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)")
    
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π context manager –¥–ª—è Telegram
    if telegram_bot and telegram_enabled:
        tg_context = telegram_bot
    else:
        class DummyBot:
            enabled = False
            async def __aenter__(self): return self
            async def __aexit__(self, *args): pass
        tg_context = DummyBot()
    
    async with BybitFuturesAPI() as api, tg_context as tg_bot:
        engine = HybridTradingEngineV2(api)  # –ù–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å timing
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Telegram
        if telegram_enabled and tg_bot.enabled:
            print("ü§ñ Telegram –±–æ—Ç –≤–∫–ª—é—á–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            logger.info("ü§ñ Telegram –±–æ—Ç –≤–∫–ª—é—á–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
            
            test_result = await tg_bot.test_connection()
            if test_result:
                print("‚úÖ Telegram —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω")
                logger.info("‚úÖ Telegram —Ç–µ—Å—Ç —É—Å–ø–µ—à–µ–Ω")
                
                startup_message = (
                    "üöÄ <b>–°–∏—Å—Ç–µ–º–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º TIMING –∑–∞–ø—É—â–µ–Ω–∞!</b>\n\n"
                    "üéØ <b>–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
                    "‚Ä¢ Pullback —Å—Ç—Ä–∞—Ç–µ–≥–∏—è\n"
                    "‚Ä¢ –ú–∏–∫—Ä–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                    "‚Ä¢ –£–º–Ω—ã–π timing –≤—Ö–æ–¥–∞\n"
                    "‚Ä¢ –õ—É—á—à–∏–µ —Ü–µ–Ω—ã –≤—Ö–æ–¥–∞\n\n"
                    "‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: <b>+15% –∫ –≤–∏–Ω—Ä–µ–π—Ç—É</b>\n"
                    "üìà –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π..."
                )
                
                startup_result = await tg_bot.send_system_message(
                    "–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", startup_message, "üöÄ"
                )
                print(f"üì¢ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if startup_result else '‚ùå –æ—à–∏–±–∫–∞'}")
                logger.info(f"üì¢ –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {'‚úÖ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ' if startup_result else '‚ùå –æ—à–∏–±–∫–∞'}")
            else:
                print("‚ùå Telegram —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
                logger.error("‚ùå Telegram —Ç–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω")
        else:
            print("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
            logger.warning("‚ö†Ô∏è Telegram –±–æ—Ç –æ—Ç–∫–ª—é—á–µ–Ω")
        
        print("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å —É–º–Ω—ã–º timing...")
        logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ —Å timing –∞–∫—Ç–∏–≤–Ω–∞")
        
        cycle_count = 0
        total_signals_generated = 0
        total_entries_executed = 0
        
        while True:
            try:
                cycle_count += 1
                start_time = time.time()
                
                logger.info(f"\n{'='*70}")
                logger.info(f"üîç –¶–∏–∫–ª #{cycle_count}: –ê–Ω–∞–ª–∏–∑ + –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤")
                logger.info(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
                
                # –§–ê–ó–ê 1: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ (–¥–æ–±–∞–≤–ª—è–µ–º –≤ timing —Å–∏—Å—Ç–µ–º—É)
                new_signals = await engine.analyze_and_generate_signals(SYMBOLS)
                
                if new_signals:
                    total_signals_generated += len(new_signals)
                    logger.info(f"üìä –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å timing: {len(new_signals)}")
                    
                    for signal_info in new_signals:
                        signal = signal_info['signal']
                        timing_strategy = signal_info['timing_strategy']
                        
                        logger.info(f"‚è≥ {signal['symbol']} {signal['direction']} "
                                   f"(—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {timing_strategy}, "
                                   f"—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 0):.1%})")
                
                # –§–ê–ó–ê 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤—ã—Ö –∫ –≤—Ö–æ–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤
                ready_entries = await engine.check_ready_entries()
                
                if ready_entries:
                    total_entries_executed += len(ready_entries)
                    logger.info(f"üéØ –ì–æ—Ç–æ–≤—ã—Ö –∫ –≤—Ö–æ–¥—É —Å–∏–≥–Ω–∞–ª–æ–≤: {len(ready_entries)}")
                    
                    for entry_signal in ready_entries:
                        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
                        display_signal(entry_signal)
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
                        if telegram_enabled and tg_bot.enabled:
                            try:
                                # –î–æ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ timing
                                timing_info = entry_signal.get('timing_info', {})
                                timing_type = timing_info.get('timing_type', 'unknown')
                                wait_time = timing_info.get('wait_time_minutes', 0)
                                entry_reason = timing_info.get('entry_reason', 'unknown')
                                
                                # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                enhanced_signal = entry_signal.copy()
                                enhanced_signal['timing_details'] = {
                                    'strategy': timing_type,
                                    'wait_time_minutes': wait_time,
                                    'entry_reason': entry_reason,
                                    'original_price': timing_info.get('original_signal_price', entry_signal['price'])
                                }
                                
                                success = await tg_bot.send_timing_signal(enhanced_signal)
                                if success:
                                    print(f"üöÄ TIMING —Å–∏–≥–Ω–∞–ª {entry_signal['symbol']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram!")
                                    logger.info(f"üöÄ TIMING —Å–∏–≥–Ω–∞–ª {entry_signal['symbol']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
                                else:
                                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å timing —Å–∏–≥–Ω–∞–ª {entry_signal['symbol']}")
                                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å timing —Å–∏–≥–Ω–∞–ª {entry_signal['symbol']}")
                            except Exception as e:
                                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ timing —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram: {str(e)}")
                                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ timing —Å–∏–≥–Ω–∞–ª–∞ –≤ Telegram: {str(e)}")
                        else:
                            print(f"üéØ TIMING —Å–∏–≥–Ω–∞–ª {entry_signal['symbol']} –≥–æ—Ç–æ–≤ (Telegram –æ—Ç–∫–ª—é—á–µ–Ω)")
                            logger.info(f"üéØ TIMING —Å–∏–≥–Ω–∞–ª {entry_signal['symbol']} –≥–æ—Ç–æ–≤ (Telegram –æ—Ç–∫–ª—é—á–µ–Ω)")
                
                # –§–ê–ó–ê 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ timing —Å–∏—Å—Ç–µ–º—ã
                timing_status = engine.get_timing_status()
                pending_count = len(timing_status.get('pending_entries', []))
                
                # –ö—Ä–∞—Ç–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ü–∏–∫–ª–∞
                cycle_time = time.time() - start_time
                
                logger.info(f"\nüìä –¶–ò–ö–õ #{cycle_count} –ó–ê–í–ï–†–®–ï–ù:")
                logger.info(f"   üîç –ù–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: {len(new_signals)}")
                logger.info(f"   üéØ –ì–æ—Ç–æ–≤—ã—Ö –≤—Ö–æ–¥–æ–≤: {len(ready_entries)}")
                logger.info(f"   ‚è≥ –û–∂–∏–¥–∞—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤: {pending_count}")
                logger.info(f"   ‚è±Ô∏è –í—Ä–µ–º—è —Ü–∏–∫–ª–∞: {cycle_time:.1f} —Å–µ–∫")
                logger.info(f"   üìà –í—Å–µ–≥–æ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é: {total_signals_generated}")
                logger.info(f"   üíº –í—Å–µ–≥–æ –≤—Ö–æ–¥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {total_entries_executed}")
                
                # –î–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å pending entries –∫–∞–∂–¥—ã–µ 10 —Ü–∏–∫–ª–æ–≤
                if cycle_count % 10 == 0 and pending_count > 0:
                    logger.info(f"\n‚è≥ –î–ï–¢–ê–õ–ò –û–ñ–ò–î–ê–Æ–©–ò–• –í–•–û–î–û–í:")
                    for entry in timing_status.get('pending_entries', []):
                        logger.info(f"   {entry['symbol']} {entry['direction'].upper()} "
                                   f"| {entry['timing_type']} "
                                   f"| –ñ–¥–µ–º: {entry['time_waiting']} "
                                   f"| –ü–æ–¥—Ç–≤.: {entry['confirmations']}")
                
                logger.info(f"{'='*70}")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏
                await asyncio.sleep(INTERVAL_SEC)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {str(e)}")
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
                if telegram_enabled and tg_bot.enabled:
                    try:
                        await tg_bot.send_system_message(
                            "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", 
                            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ #{cycle_count}:\n<code>{str(e)}</code>",
                            "üö®"
                        )
                        print("üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                        logger.info("üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
                    except Exception as tg_error:
                        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: {str(tg_error)}")
                        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—à–∏–±–∫—É –≤ Telegram: {str(tg_error)}")
                
                await asyncio.sleep(30)

async def send_timing_signal(tg_bot, signal):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª —Å timing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ Telegram"""
    try:
        timing_details = signal.get('timing_details', {})
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å timing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        symbol = signal['symbol']
        direction = signal['direction'].upper()
        price = signal['price']
        confidence = signal.get('confidence', 0)
        
        # Timing –¥–µ—Ç–∞–ª–∏
        strategy = timing_details.get('strategy', 'unknown')
        wait_time = timing_details.get('wait_time_minutes', 0)
        entry_reason = timing_details.get('entry_reason', 'unknown')
        original_price = timing_details.get('original_price', price)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏–µ —Ü–µ–Ω—ã
        if direction == 'BUY':
            price_improvement = ((original_price - price) / original_price) * 100
            improvement_text = f"üëç –õ—É—á—à–µ –Ω–∞ {price_improvement:.2f}%" if price_improvement > 0 else ""
        else:
            price_improvement = ((price - original_price) / original_price) * 100  
            improvement_text = f"üëç –õ—É—á—à–µ –Ω–∞ {price_improvement:.2f}%" if price_improvement > 0 else ""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üéØ <b>TIMING –í–•–û–î –ì–û–¢–û–í</b>

üìà <b>{symbol}</b> - {direction}
üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: <code>${price:.5f}</code>
üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: <b>{confidence:.1%}</b>

‚è∞ <b>Timing –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>
‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: <i>{strategy}</i>
‚Ä¢ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: <i>{wait_time:.1f} –º–∏–Ω</i>  
‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞ –≤—Ö–æ–¥–∞: <i>{entry_reason}</i>
‚Ä¢ –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–Ω–∞: <code>${original_price:.5f}</code>
{improvement_text}

üéöÔ∏è <b>–£—Ä–æ–≤–Ω–∏:</b>
üõë SL: <code>${signal['stop_loss']:.5f}</code>
üéØ TP1: <code>${signal['take_profit'][0]:.5f}</code>
üéØ TP2: <code>${signal['take_profit'][1]:.5f}</code>
üéØ TP3: <code>${signal['take_profit'][2]:.5f}</code>

üí° <i>Timing —Å–∏—Å—Ç–µ–º–∞ –¥–æ–∂–¥–∞–ª–∞—Å—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –¥–ª—è –≤—Ö–æ–¥–∞!</i>
"""
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        emoji = "üü¢" if direction == "BUY" else "üî¥"
        
        return await tg_bot.send_message(message.strip(), parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ timing —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
        return False

# –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ (–µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
def patch_telegram_bot():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ send_timing_signal –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"""
    try:
        if create_telegram_bot:
            # –ü–∞—Ç—á–∏–º –∫–ª–∞—Å—Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
            original_bot = create_telegram_bot()
            if original_bot:
                original_bot.__class__.send_timing_signal = send_timing_signal
    except:
        pass

if __name__ == "__main__":
    try:
        print("üèÅ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º timing...")
        
        # –ü–∞—Ç—á–∏–º —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞
        patch_telegram_bot()
        
        asyncio.run(main_loop_v2())
    except KeyboardInterrupt:
        print("\nüëã –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        logger.info("–°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")