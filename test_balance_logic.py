# test_balance_logic.py
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞
–ó–∞–ø—É—Å–∫: python test_balance_logic.py
"""

import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append('.')
sys.path.append('virtual_trading')

def test_balance_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –±–∞–ª–∞–Ω—Å–æ–º"""
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –õ–û–ì–ò–ö–ò –ë–ê–õ–ê–ù–°–ê V2.1")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç—ã (—Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫)
        from virtual_trading.services.balance_manager import BalanceManager
        from virtual_trading.models.position import VirtualPosition
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º BalanceManager
        balance_manager = BalanceManager(
            initial_balance=10000.0,
            position_size_percent=2.0,
            max_exposure_percent=20.0
        )
        
        print("‚úÖ BalanceManager —Å–æ–∑–¥–∞–Ω")
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_manager.initial_balance:,.2f}")
        print(f"   –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${balance_manager.position_size_usd:,.0f}")
        print(f"   –õ–∏–º–∏—Ç —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏: ${balance_manager.max_exposure_usd:,.0f}")
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\nüîç –¢–ï–°–¢ 1: –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")
        positions = {}
        
        balance_summary = balance_manager.get_balance_summary(positions)
        consistency = balance_manager.check_balance_consistency(positions)
        
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_summary['available_balance']:,.2f}")
        print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance_summary['current_balance']:,.2f}")
        print(f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${balance_summary['invested_capital']:,.2f}")
        print(f"   –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if consistency['is_consistent'] else '‚ùå'}")
        
        # –¢–µ—Å—Ç 2: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π
        print("\nüîç –¢–ï–°–¢ 2: –û—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–π")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
        test_position = VirtualPosition(
            symbol="BTCUSDT",
            direction="buy",
            entry_price=50000.0,
            entry_time=datetime.now(),
            position_size_usd=200.0,
            quantity=200.0 / 50000.0,  # 0.004 BTC
            stop_loss=48000.0,
            tp1=52000.0,
            tp2=54000.0,
            tp3=56000.0
        )
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
        can_open, reason = balance_manager.can_open_new_position(positions)
        print(f"   –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {'‚úÖ' if can_open else '‚ùå'} ({reason})")
        
        if can_open:
            success = balance_manager.reserve_funds(200.0)
            print(f"   –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤: {'‚úÖ' if success else '‚ùå'}")
            
            if success:
                positions["BTCUSDT"] = test_position
                print(f"   –ü–æ–∑–∏—Ü–∏—è BTCUSDT –¥–æ–±–∞–≤–ª–µ–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
        balance_summary = balance_manager.get_balance_summary(positions)
        consistency = balance_manager.check_balance_consistency(positions)
        
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_summary['available_balance']:,.2f}")
        print(f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${balance_summary['invested_capital']:,.2f}")
        print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance_summary['current_balance']:,.2f}")
        print(f"   –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if consistency['is_consistent'] else '‚ùå'}")
        
        # –¢–µ—Å—Ç 3: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        print("\nüîç –¢–ï–°–¢ 3: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (TP1)")
        
        if "BTCUSDT" in positions:
            position = positions["BTCUSDT"]
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ 50% –Ω–∞ TP1
            pnl_per_unit = 52000.0 - 50000.0  # $2000 profit per BTC
            quantity_closed = position.quantity * 0.5  # 50%
            pnl_usd = quantity_closed * pnl_per_unit
            
            print(f"   –ó–∞–∫—Ä—ã–≤–∞–µ–º 50% –ø–æ–∑–∏—Ü–∏–∏")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity_closed:.6f} BTC")
            print(f"   P&L: ${pnl_usd:+.2f}")
            
            # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –ø—Ä–∏–±—ã–ª—å—é
            balance_manager.release_funds(100.0, pnl_usd)  # 50% –æ—Ç $200 + profit
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            position.tp1_filled = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            balance_summary = balance_manager.get_balance_summary(positions)
            consistency = balance_manager.check_balance_consistency(positions)
            
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_summary['available_balance']:,.2f}")
            print(f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${balance_summary['invested_capital']:,.2f}")
            print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance_summary['current_balance']:,.2f}")
            print(f"   –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${balance_summary.get('total_realized_pnl', 0):+.2f}")
            print(f"   –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if consistency['is_consistent'] else '‚ùå'}")
            
            if not consistency['is_consistent']:
                print(f"   ‚ö†Ô∏è –†–∞–∑–Ω–∏—Ü–∞: ${consistency.get('difference', 0):+.2f}")
        
        # –¢–µ—Å—Ç 4: –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ
        print("\nüîç –¢–ï–°–¢ 4: –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        
        if "BTCUSDT" in positions:
            position = positions["BTCUSDT"]
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 50%
            remaining_quantity = position.quantity * 0.5
            pnl_usd = remaining_quantity * (54000.0 - 50000.0)  # TP2 price
            
            print(f"   –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è 50%")
            print(f"   P&L: ${pnl_usd:+.2f}")
            
            balance_manager.release_funds(100.0, pnl_usd)  # Remaining 50% + profit
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
            del positions["BTCUSDT"]
            
            # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            balance_summary = balance_manager.get_balance_summary(positions)
            consistency = balance_manager.check_balance_consistency(positions)
            
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_summary['available_balance']:,.2f}")
            print(f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–∞–ø–∏—Ç–∞–ª: ${balance_summary['invested_capital']:,.2f}")
            print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance_summary['current_balance']:,.2f}")
            print(f"   –û–±—â–∏–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${balance_summary.get('total_realized_pnl', 0):+.2f}")
            print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {balance_summary['balance_percent']:+.2f}%")
            print(f"   –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: {'‚úÖ' if consistency['is_consistent'] else '‚ùå'}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤
        print("\nüîç –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫-–ª–∏–º–∏—Ç–æ–≤")
        
        risk_status = balance_manager.check_risk_limits(positions)
        print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_status['risk_level']}")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(risk_status['warnings'])}")
        
        for warning in risk_status['warnings']:
            print(f"   ‚ö†Ô∏è {warning}")
        
        for recommendation in risk_status.get('recommendations', []):
            print(f"   üí° {recommendation}")
        
        # –¢–µ—Å—Ç 6: Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\nüîç –¢–ï–°–¢ 6: Debug –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        
        debug_info = balance_manager.get_debug_info()
        print(f"   –û–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º: {debug_info['total_operations']}")
        print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {len(debug_info['recent_operations'])}")
        
        if debug_info['recent_operations']:
            print("   –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ–ø–µ—Ä–∞—Ü–∏–∏:")
            for op in debug_info['recent_operations'][-3:]:
                print(f"     {op['type']}: ${op.get('amount', 0):+.2f}, P&L: ${op.get('pnl', 0):+.2f}")
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        
        final_balance = balance_summary['current_balance']
        initial_balance = balance_manager.initial_balance
        total_return = ((final_balance - initial_balance) / initial_balance) * 100
        
        print(f"üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initial_balance:,.2f}")
        print(f"   –§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${final_balance:,.2f}")
        print(f"   –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {total_return:+.2f}%")
        print(f"   –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã: {'‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ' if consistency['is_consistent'] else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è'}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –º–æ–¥—É–ª–∏ virtual_trading —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
        return False
        
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ –∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"""
    
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í")
    print("=" * 50)
    
    try:
        from virtual_trading.services.balance_manager import BalanceManager
        from virtual_trading.models.position import VirtualPosition
        
        # –¢–µ—Å—Ç —Å –º–∞–ª–µ–Ω—å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        print("üîç –¢–µ—Å—Ç: –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å")
        small_balance_manager = BalanceManager(100.0, 10.0, 50.0)  # $100, 10% –ø–æ–∑–∏—Ü–∏—è
        
        positions = {}
        can_open, reason = small_balance_manager.can_open_new_position(positions)
        print(f"   –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é —Å –±–∞–ª–∞–Ω—Å–æ–º $100: {'‚úÖ' if can_open else '‚ùå'} ({reason})")
        
        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏
        print("\nüîç –¢–µ—Å—Ç: –ù—É–ª–µ–≤—ã–µ —Ü–µ–Ω—ã")
        balance_manager = BalanceManager(1000.0, 5.0, 25.0)
        
        test_position = VirtualPosition(
            symbol="TESTCOIN",
            direction="buy", 
            entry_price=0.0001,  # –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∞—è —Ü–µ–Ω–∞
            entry_time=datetime.now(),
            position_size_usd=50.0,
            quantity=50.0 / 0.0001,  # –ë–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            stop_loss=0.00008,
            tp1=0.00012,
            tp2=0.00015,
            tp3=0.00020
        )
        
        positions = {"TESTCOIN": test_position}
        current_prices = {"TESTCOIN": 0.00015}
        
        balance_summary = balance_manager.get_balance_summary(positions, current_prices)
        unrealized_pnl = balance_summary.get('unrealized_pnl', 0)
        
        print(f"   –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏: ${unrealized_pnl:+.2f}")
        
        # –¢–µ—Å—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        consistency = balance_manager.check_balance_consistency(positions, current_prices)
        print(f"   –ö–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —Ü–µ–Ω–∞–º–∏: {'‚úÖ' if consistency['is_consistent'] else '‚ùå'}")
        
        print("\n‚úÖ –¢–µ—Å—Ç—ã –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω—ã")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤: {e}")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞...")
    
    success = test_balance_logic()
    
    if success:
        test_edge_cases()
        print("\nüéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –õ–æ–≥–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("   –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ.")
    else:
        print("\n‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ –±–∞–ª–∞–Ω—Å–∞!")
        print("   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞.")