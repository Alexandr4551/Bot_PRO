# test_balance_v3.py
"""
COMPREHENSIVE —Ç–µ—Å—Ç –¥–ª—è BalanceManager V3.0
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å—é –ª–æ–≥–∏–∫—É –±–∞–ª–∞–Ω—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
"""

import sys
import os
from datetime import datetime
from dataclasses import dataclass

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.append('.')
sys.path.append('virtual_trading')

# –ú–æ–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@dataclass
class MockPosition:
    """–ú–æ–∫ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    symbol: str
    direction: str
    entry_price: float
    quantity: float
    tp1_filled: bool = False
    tp2_filled: bool = False
    tp3_filled: bool = False
    
    def get_remaining_percent(self) -> int:
        percent = 100
        if self.tp1_filled:
            percent -= 50
        if self.tp2_filled:
            percent -= 25
        if self.tp3_filled:
            percent -= 25
        return max(0, percent)
    
    def get_remaining_quantity(self) -> float:
        remaining = self.quantity
        if self.tp1_filled:
            remaining -= self.quantity * 0.5
        if self.tp2_filled:
            remaining -= self.quantity * 0.25
        if self.tp3_filled:
            remaining -= self.quantity * 0.25
        return max(0, remaining)

def test_balance_manager():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç BalanceManager"""
    print("üß™ COMPREHENSIVE –¢–ï–°–¢ BALANCE MANAGER V3.0")
    print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π
        from virtual_trading.services.balance_manager import BalanceManager
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç BalanceManager —É—Å–ø–µ—à–µ–Ω")
        
        # –¢–µ—Å—Ç 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        print("\nüîç –¢–ï–°–¢ 1: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")
        balance_manager = BalanceManager(
            initial_balance=10000.0,
            position_size_percent=2.0,
            max_exposure_percent=20.0
        )
        
        assert balance_manager.initial_balance == 10000.0
        assert balance_manager.available_balance == 10000.0
        assert balance_manager.position_size_usd == 200.0
        assert balance_manager.max_exposure_usd == 2000.0
        assert balance_manager.total_invested == 0.0
        assert balance_manager.total_realized_pnl == 0.0
        
        print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        print("\nüîç –¢–ï–°–¢ 2: –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤")
        positions = {}
        
        can_open, reason = balance_manager.can_open_new_position(positions)
        assert can_open == True
        assert reason == "ok"
        
        success = balance_manager.reserve_funds(200.0)
        assert success == True
        assert balance_manager.available_balance == 9800.0
        assert balance_manager.total_invested == 200.0
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        print("\nüîç –¢–ï–°–¢ 3: –ü–æ–∑–∏—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç—ã")
        position = MockPosition(
            symbol="BTCUSDT",
            direction="buy",
            entry_price=50000.0,
            quantity=200.0 / 50000.0  # 0.004 BTC
        )
        positions["BTCUSDT"] = position
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç—ã
        invested_capital = balance_manager.get_invested_capital(positions)
        assert invested_capital == 200.0
        
        current_balance = balance_manager.get_current_balance(positions)
        assert current_balance == 10000.0  # 9800 + 200
        
        print("‚úÖ –†–∞—Å—á–µ—Ç—ã –ø–æ–∑–∏—Ü–∏–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
        
        # –¢–µ—Å—Ç 4: –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L
        print("\nüîç –¢–ï–°–¢ 4: –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L")
        current_prices = {"BTCUSDT": 52000.0}  # –¶–µ–Ω–∞ –≤—ã—Ä–æ—Å–ª–∞ –Ω–∞ $2000
        
        unrealized_pnl = balance_manager.get_unrealized_pnl(positions, current_prices)
        expected_pnl = position.quantity * (52000.0 - 50000.0)  # 0.004 * 2000 = $8
        assert abs(unrealized_pnl - expected_pnl) < 0.01
        
        current_balance_with_pnl = balance_manager.get_current_balance(positions, current_prices)
        assert abs(current_balance_with_pnl - (10000.0 + expected_pnl)) < 0.01
        
        print(f"‚úÖ –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${unrealized_pnl:+.2f}")
        
        # –¢–µ—Å—Ç 5: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ (TP1 - 50%)
        print("\nüîç –¢–ï–°–¢ 5: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ TP1")
        tp1_price = 52000.0
        tp1_quantity = position.quantity * 0.5
        tp1_pnl = tp1_quantity * (tp1_price - position.entry_price)  # 0.002 * 2000 = $4
        
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º 50% –ø–æ–∑–∏—Ü–∏–∏ —Å –ø—Ä–∏–±—ã–ª—å—é
        balance_manager.release_funds(100.0, tp1_pnl)  # 50% –æ—Ç $200 + P&L
        position.tp1_filled = True
        
        assert abs(balance_manager.available_balance - (9800.0 + 100.0 + tp1_pnl)) < 0.01
        assert balance_manager.total_invested == 100.0  # –û—Å—Ç–∞–ª–æ—Å—å 50%
        assert abs(balance_manager.total_realized_pnl - tp1_pnl) < 0.01
        
        print(f"‚úÖ TP1 –∑–∞–∫—Ä—ã—Ç —Å P&L: ${tp1_pnl:+.2f}")
        
        # –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        print("\nüîç –¢–ï–°–¢ 6: –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è")
        invested_capital = balance_manager.get_invested_capital(positions)
        assert invested_capital == 100.0  # 50% –æ—Ç $200
        
        unrealized_pnl = balance_manager.get_unrealized_pnl(positions, current_prices)
        expected_unrealized = position.get_remaining_quantity() * (52000.0 - 50000.0)  # 0.002 * 2000 = $4
        assert abs(unrealized_pnl - expected_unrealized) < 0.01
        
        current_balance = balance_manager.get_current_balance(positions, current_prices)
        expected_balance = balance_manager.available_balance + invested_capital + unrealized_pnl
        assert abs(current_balance - expected_balance) < 0.01
        
        print(f"‚úÖ –ë–∞–ª–∞–Ω—Å –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: ${current_balance:.2f}")
        
        # –¢–µ—Å—Ç 7: –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        print("\nüîç –¢–ï–°–¢ 7: –ü–æ–ª–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∑–∏—Ü–∏–∏")
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ 50%
        remaining_quantity = position.get_remaining_quantity()
        remaining_pnl = remaining_quantity * (52000.0 - 50000.0)
        
        balance_manager.release_funds(100.0, remaining_pnl)
        position.tp2_filled = True
        position.tp3_filled = True
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
        del positions["BTCUSDT"]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        final_balance = balance_manager.get_current_balance(positions)
        expected_final = balance_manager.initial_balance + balance_manager.total_realized_pnl
        assert abs(final_balance - expected_final) < 0.01
        assert balance_manager.total_invested == 0.0
        
        print(f"‚úÖ –ü–æ–∑–∏—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–∫—Ä—ã—Ç–∞, –±–∞–ª–∞–Ω—Å: ${final_balance:.2f}")
        
        # –¢–µ—Å—Ç 8: –õ–∏–º–∏—Ç—ã —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
        print("\nüîç –¢–ï–°–¢ 8: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–∏–º–∏—Ç–æ–≤")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –º–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
        test_positions = {}
        for i in range(10):  # 10 –ø–æ–∑–∏—Ü–∏–π –ø–æ $200 = $2000 (–ª–∏–º–∏—Ç —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏)
            balance_manager.reserve_funds(200.0)
            test_positions[f"TEST{i}"] = MockPosition(f"TEST{i}", "buy", 100.0, 2.0)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏
        can_open, reason = balance_manager.can_open_new_position(test_positions)
        assert can_open == False
        assert reason == "exposure_limit"
        
        print("‚úÖ –õ–∏–º–∏—Ç —ç–∫—Å–ø–æ–∑–∏—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –¢–µ—Å—Ç 9: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        print("\nüîç –¢–ï–°–¢ 9: –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è")
        validation = balance_manager.validate_state()
        
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_manager.available_balance:.2f}")
        print(f"   –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${balance_manager.total_invested:.2f}")
        print(f"   –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${balance_manager.total_realized_pnl:.2f}")
        print(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è: {'‚úÖ OK' if validation['is_valid'] else '‚ùå ERROR'}")
        
        if not validation['is_valid']:
            print(f"   –ü—Ä–æ–±–ª–µ–º—ã: {validation['issues']}")
        
        # –¢–µ—Å—Ç 10: –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞
        print("\nüîç –¢–ï–°–¢ 10: –°–≤–æ–¥–∫–∞ –±–∞–ª–∞–Ω—Å–∞")
        summary = balance_manager.get_balance_summary(test_positions)
        
        print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${summary['current_balance']:,.2f}")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞: {summary['balance_percent']:+.2f}%")
        print(f"   –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è: {summary['exposure_percent']:.1f}%")
        
        # –¢–µ—Å—Ç 11: –†–∏—Å–∫-–ª–∏–º–∏—Ç—ã
        print("\nüîç –¢–ï–°–¢ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–æ–≤")
        risk_status = balance_manager.check_risk_limits(test_positions)
        
        print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_status['risk_level']}")
        print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {len(risk_status['warnings'])}")
        
        for warning in risk_status['warnings']:
            print(f"     ‚ö†Ô∏è {warning}")
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ BalanceManager V3.0 –≥–æ—Ç–æ–≤ –∫ production!")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${balance_manager.initial_balance:,.2f}")
        print(f"   –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${summary['current_balance']:,.2f}")
        print(f"   –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π P&L: ${balance_manager.total_realized_pnl:+.2f}")
        print(f"   –≠–∫—Å–ø–æ–∑–∏—Ü–∏—è: {summary['exposure_percent']:.1f}% –∏–∑ {balance_manager.max_exposure_percent}%")
        print(f"   –°–∏—Å—Ç–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å: {'üü¢ –ó–î–û–†–û–í' if validation['is_valid'] else 'üî¥ –ü–†–û–ë–õ–ï–ú–´'}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ virtual_trading –º–æ–¥—É–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã")
        return False
        
    except AssertionError as e:
        print(f"‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: Assertion error")
        print(f"   –î–µ—Ç–∞–ª–∏: {e}")
        return False
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_edge_cases():
    """–¢–µ—Å—Ç –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\nüß™ –¢–ï–°–¢ –ö–†–ê–ô–ù–ò–• –°–õ–£–ß–ê–ï–í")
    print("=" * 40)
    
    try:
        from virtual_trading.services.balance_manager import BalanceManager
        
        # –¢–µ—Å—Ç —Å –º–∞–ª–µ–Ω—å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º
        print("üîç –ú–∞–ª–µ–Ω—å–∫–∏–π –±–∞–ª–∞–Ω—Å:")
        small_bm = BalanceManager(100.0, 10.0, 50.0)
        positions = {}
        can_open, reason = small_bm.can_open_new_position(positions)
        print(f"   –ú–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–∑–∏—Ü–∏—é: {'‚úÖ' if can_open else '‚ùå'} ({reason})")
        
        # –¢–µ—Å—Ç —Å –Ω—É–ª–µ–≤—ã–º–∏/–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        print("\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è:")
        validation = small_bm.validate_state()
        print(f"   –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–Ω–∞: {'‚úÖ' if validation['is_valid'] else '‚ùå'}")
        
        # –¢–µ—Å—Ç —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        print("\nüîç –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        for i in range(5):
            if small_bm.can_open_new_position({})[0]:
                small_bm.reserve_funds(10.0)
                small_bm.release_funds(10.0, 1.0)  # +$1 –∫–∞–∂–¥—ã–π —Ä–∞–∑
        
        final_validation = small_bm.validate_state()
        print(f"   –ü–æ—Å–ª–µ 5 –æ–ø–µ—Ä–∞—Ü–∏–π: {'‚úÖ' if final_validation['is_valid'] else '‚ùå'}")
        print(f"   P&L: ${small_bm.total_realized_pnl:+.2f}")
        
        print("‚úÖ –ö—Ä–∞–π–Ω–∏–µ —Å–ª—É—á–∞–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∫—Ä–∞–π–Ω–∏—Ö —Å–ª—É—á–∞—è—Ö: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–ê–ü–£–°–ö COMPREHENSIVE –¢–ï–°–¢–ê BALANCE MANAGER")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—è–µ–º production-ready –ª–æ–≥–∏–∫—É –±–∞–ª–∞–Ω—Å–∞ V3.0")
    print()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    success = test_balance_manager()
    
    if success:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
        test_edge_cases()
        
        print("\nüéä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("‚úÖ –õ–æ–≥–∏–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ production!")
        print("üéØ –ú–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–µ–∫—Ç!")
    else:
        print("\n‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
        print("üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ –±–∞–ª–∞–Ω—Å–∞!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞!")