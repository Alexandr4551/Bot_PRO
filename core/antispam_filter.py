# core/antispam_filter.py - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""
–°–¢–†–û–ì–ò–ô –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
–≠–¢–ê–ü 1.1: –°–Ω–∏–∂–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–æ–≤, –ø–æ–≤—ã—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
"""

import logging
from datetime import datetime, timedelta
from collections import defaultdict

from config import ANTISPAM_CONFIG

logger = logging.getLogger(__name__)

class AntiSpamFilter:
    """–°–¢–†–û–ì–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        self.last_signals = defaultdict(lambda: {'timestamp': None, 'price': 0, 'direction': None})
        self.signal_history = defaultdict(list)
        self.symbol_cooldowns = defaultdict(int)  # –°—á–µ—Ç—á–∏–∫ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
    
    def should_send_signal(self, symbol, signal):
        """–°–¢–†–û–ì–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–≥–Ω–∞–ª–∞"""
        current_time = datetime.now()
        last_signal = self.last_signals[symbol]
        
        # 1. –£–í–ï–õ–ò–ß–ï–ù–ù–´–ô –∫—É–ª–¥–∞—É–Ω - –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É —Å–∏–≥–Ω–∞–ª–∞–º–∏
        base_cooldown = ANTISPAM_CONFIG['COOLDOWN_MINUTES']
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫—É–ª–¥–∞—É–Ω: –±–æ–ª—å—à–µ –∫—É–ª–¥–∞—É–Ω –ø–æ—Å–ª–µ –Ω–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
        cooldown_multiplier = 1 + (self.symbol_cooldowns[symbol] * 0.5)  # +50% –∑–∞ –∫–∞–∂–¥—ã–π –Ω–µ—É—Å–ø–µ—à–Ω—ã–π
        actual_cooldown = min(base_cooldown * cooldown_multiplier, 180)  # –ú–∞–∫—Å–∏–º—É–º 3 —á–∞—Å–∞
        
        if last_signal['timestamp']:
            time_diff = (current_time - last_signal['timestamp']).total_seconds() / 60
            if time_diff < actual_cooldown:
                logger.debug(f"üö´ {symbol}: –ö—É–ª–¥–∞—É–Ω –∞–∫—Ç–∏–≤–µ–Ω ({time_diff:.1f}/{actual_cooldown:.1f} –º–∏–Ω)")
                return False
        
        # 2. –£–í–ï–õ–ò–ß–ï–ù–ù–û–ï –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        min_price_change = ANTISPAM_CONFIG['MIN_PRICE_CHANGE_PERCENT'] * 1.5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤ 1.5 —Ä–∞–∑–∞
        
        if last_signal['price'] > 0:
            price_change = abs((signal['price'] - last_signal['price']) / last_signal['price'] * 100)
            if price_change < min_price_change:
                logger.debug(f"üö´ {symbol}: –ú–∞–ª–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã ({price_change:.2f}% < {min_price_change:.2f}%)")
                return False
        
        # 3. –ó–ê–ü–†–ï–¢ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ –≤ –∫–æ—Ä–æ—Ç–∫–∏–π —Å—Ä–æ–∫
        if (last_signal['direction'] and 
            last_signal['direction'] != signal['direction'] and
            last_signal['timestamp']):
            
            time_since_opposite = (current_time - last_signal['timestamp']).total_seconds() / 60
            min_opposite_time = actual_cooldown * 2  # –î–≤–æ–π–Ω–æ–π –∫—É–ª–¥–∞—É–Ω –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            
            if time_since_opposite < min_opposite_time:
                logger.debug(f"üö´ {symbol}: –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ({time_since_opposite:.1f}/{min_opposite_time:.1f} –º–∏–Ω)")
                return False
        
        # 4. –°–¢–†–û–ì–ò–ô –∞–Ω–∞–ª–∏–∑ –Ω–µ–¥–∞–≤–Ω–µ–π –∏—Å—Ç–æ—Ä–∏–∏
        recent_history = [s for s in self.signal_history[symbol] 
                         if (current_time - s['timestamp']).total_seconds() < 14400]  # 4 —á–∞—Å–∞
        
        if recent_history:
            # a) –ú–∞–∫—Å–∏–º—É–º 2 —Å–∏–≥–Ω–∞–ª–∞ –∑–∞ 4 —á–∞—Å–∞ (–±—ã–ª–æ –±–µ–∑ –ª–∏–º–∏—Ç–∞)
            if len(recent_history) >= 2:
                logger.debug(f"üö´ {symbol}: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–≥–Ω–∞–ª–æ–≤ (2 –∑–∞ 4 —á–∞—Å–∞)")
                return False
            
            # b) –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ö–æ–∂–∏–µ —É—Ä–æ–≤–Ω–∏ - –£–ñ–ï–°–¢–û–ß–ï–ù–ù–´–ï —É—Å–ª–æ–≤–∏—è
            for hist_signal in recent_history:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —Ü–µ–Ω –≤—Ö–æ–¥–∞
                entry_price_diff = abs(signal['price'] - hist_signal['price']) / signal['price']
                if entry_price_diff < 0.01:  # –ú–µ–Ω–µ–µ 1% —Ä–∞–∑–Ω–∏—Ü—ã –≤ —Ü–µ–Ω–µ –≤—Ö–æ–¥–∞
                    logger.debug(f"üö´ {symbol}: –°–ª–∏—à–∫–æ–º –ø–æ—Ö–æ–∂–∞—è —Ü–µ–Ω–∞ –≤—Ö–æ–¥–∞")
                    return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å —É—Ä–æ–≤–Ω–µ–π SL –∏ TP
                if hist_signal.get('stop_loss') and hist_signal.get('take_profit'):
                    sl_diff = abs(signal.get('stop_loss', 0) - hist_signal.get('stop_loss', 0)) / signal['price']
                    
                    tp1_current = signal.get('take_profit', [0])[0] if signal.get('take_profit') else 0
                    tp1_hist = hist_signal.get('take_profit', [0])[0] if hist_signal.get('take_profit') else 0
                    tp_diff = abs(tp1_current - tp1_hist) / signal['price'] if signal['price'] > 0 else 0
                    
                    # –ï—Å–ª–∏ –∏ SL –∏ TP –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ - —ç—Ç–æ –¥—É–±–ª–∏–∫–∞—Ç
                    if sl_diff < 0.003 and tp_diff < 0.003:  # 0.3% —Ä–∞–∑–ª–∏—á–∏–µ - –æ—á–µ–Ω—å —Å—Ç—Ä–æ–≥–æ
                        logger.debug(f"üö´ {symbol}: –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è —Å–µ—Ç–∞–ø (SL: {sl_diff:.1%}, TP: {tp_diff:.1%})")
                        return False
        
        # 5. –ü–†–û–í–ï–†–ö–ê –∫–∞—á–µ—Å—Ç–≤–∞ —Å–∏–≥–Ω–∞–ª–∞
        confidence = signal.get('confidence', 0)
        signal_type = signal.get('signal_type', '')
        
        # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
        min_confidence = 0.65  # –ü–æ–≤—ã—à–∞–µ–º —Å –±–∞–∑–æ–≤–æ–≥–æ –ø–æ—Ä–æ–≥–∞
        
        # –û—Å–æ–±—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–∏–≥–Ω–∞–ª–æ–≤
        if signal_type == 'technical_strict':
            min_confidence = 0.75  # –î–ª—è —á–∏—Å—Ç–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤ - –≤—ã—à–µ –ø–æ—Ä–æ–≥
        elif signal_type in ['extreme_rsi_oversold', 'extreme_rsi_overbought']:
            min_confidence = 0.7   # –î–ª—è RSI —ç–∫—Å—Ç—Ä–µ–º—É–º–æ–≤ - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥
        
        if confidence < min_confidence:
            logger.debug(f"üö´ {symbol}: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å ({confidence:.1%} < {min_confidence:.1%})")
            return False
        
        # 6. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ R/R
        if signal.get('risk_reward', 0) < 2.0:  # –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 1:2
            logger.debug(f"üö´ {symbol}: –ù–∏–∑–∫–∏–π R/R {signal.get('risk_reward', 0):.2f}")
            return False
        
        return True
    
    def register_signal(self, symbol, signal):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        current_time = datetime.now()
        
        self.last_signals[symbol] = {
            'timestamp': current_time,
            'price': signal['price'],
            'direction': signal['direction'],
            'confidence': signal.get('confidence', 0),
            'signal_type': signal.get('signal_type', '')
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.signal_history[symbol].append({
            'timestamp': current_time,
            'price': signal['price'],
            'direction': signal['direction'],
            'stop_loss': signal.get('stop_loss'),
            'take_profit': signal.get('take_profit'),
            'confidence': signal.get('confidence', 0),
            'signal_type': signal.get('signal_type', ''),
            'risk_reward': signal.get('risk_reward', 0)
        })
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞)
        cutoff_time = current_time - timedelta(hours=24)
        self.signal_history[symbol] = [s for s in self.signal_history[symbol] 
                                      if s['timestamp'] > cutoff_time]
        
        logger.info(f"‚úÖ –°–∏–≥–Ω–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {symbol} {signal['direction']} "
                   f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 0):.1%}, "
                   f"—Ç–∏–ø: {signal.get('signal_type', 'unknown')})")
    
    def register_signal_failure(self, symbol):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∫—É–ª–¥–∞—É–Ω–∞"""
        self.symbol_cooldowns[symbol] += 1
        logger.debug(f"üìâ –ù–µ—É—Å–ø–µ—à–Ω—ã–π —Å–∏–≥–Ω–∞–ª {symbol}, —Å—á–µ—Ç—á–∏–∫: {self.symbol_cooldowns[symbol]}")
    
    def register_signal_success(self, symbol):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫—É–ª–¥–∞—É–Ω–∞"""
        if self.symbol_cooldowns[symbol] > 0:
            self.symbol_cooldowns[symbol] = max(0, self.symbol_cooldowns[symbol] - 1)
            logger.debug(f"üìà –£—Å–ø–µ—à–Ω—ã–π —Å–∏–≥–Ω–∞–ª {symbol}, —Å—á–µ—Ç—á–∏–∫ —Å–±—Ä–æ—à–µ–Ω: {self.symbol_cooldowns[symbol]}")
    
    def get_symbol_stats(self, symbol):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–∏–º–≤–æ–ª—É"""
        recent_signals = len([s for s in self.signal_history[symbol] 
                            if (datetime.now() - s['timestamp']).total_seconds() < 14400])
        
        return {
            'recent_signals_4h': recent_signals,
            'failure_count': self.symbol_cooldowns[symbol],
            'last_signal_time': self.last_signals[symbol]['timestamp'],
            'current_cooldown_multiplier': 1 + (self.symbol_cooldowns[symbol] * 0.5)
        }