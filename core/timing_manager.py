# core/timing_manager.py - –ù–û–í–´–ô –ú–û–î–£–õ–¨
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ timing –≤—Ö–æ–¥–∞
–≠–¢–ê–ü 1.2: –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ +15% –∫ –≤–∏–Ω—Ä–µ–π—Ç—É
"""

import pandas as pd
import numpy as np
import logging
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import Dict, List, Optional
from enum import Enum

logger = logging.getLogger(__name__)

class EntryTiming(Enum):
    """–¢–∏–ø—ã timing –¥–ª—è –≤—Ö–æ–¥–∞"""
    IMMEDIATE = "immediate"      # –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—Ö–æ–¥ (—Å—Ç–∞—Ä—ã–π —Å–ø–æ—Å–æ–±)
    PULLBACK = "pullback"        # –ñ–¥–∞—Ç—å pullback
    BREAKOUT = "breakout"        # –ñ–¥–∞—Ç—å –ø—Ä–æ–±–æ–π —É—Ä–æ–≤–Ω—è
    VOLUME_SPIKE = "volume_spike" # –ñ–¥–∞—Ç—å –≤—Å–ø–ª–µ—Å–∫ –æ–±—ä–µ–º–∞

@dataclass
class PendingEntry:
    """–û–∂–∏–¥–∞—é—â–∏–π –≤—Ö–æ–¥"""
    symbol: str
    direction: str
    signal_price: float
    signal_time: datetime
    signal_data: dict
    
    # Timing –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    timing_type: EntryTiming
    target_entry_price: float = None
    max_wait_minutes: int = 60  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    
    # Pullback –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    pullback_target: float = None  # –¶–µ–Ω–∞ –¥–ª—è pullback
    pullback_tolerance: float = 0.002  # 0.2% —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å
    
    # –ú–∏–∫—Ä–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    required_confirmations: int = 2
    confirmations_received: int = 0
    
    # –°—Ç–∞—Ç—É—Å
    is_active: bool = True
    timeout_time: datetime = None
    entry_attempts: int = 0
    max_attempts: int = 3
    
    def __post_init__(self):
        if self.timeout_time is None:
            self.timeout_time = self.signal_time + timedelta(minutes=self.max_wait_minutes)

class SmartTimingManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–º–Ω–æ–≥–æ timing –≤—Ö–æ–¥–∞"""
    
    def __init__(self):
        self.pending_entries: Dict[str, PendingEntry] = {}
        self.entry_history: List[dict] = []
        
    def add_signal_for_timing(self, signal, timing_strategy="auto"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–≥–Ω–∞–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ timing"""
        symbol = signal['symbol']
        
        # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–π –≤—Ö–æ–¥ –¥–ª—è —ç—Ç–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ - –æ—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π
        if symbol in self.pending_entries:
            logger.info(f"–û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ–∂–∏–¥–∞—é—â–∏–π –≤—Ö–æ–¥ –¥–ª—è {symbol}")
            del self.pending_entries[symbol]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é timing
        timing_type = self._determine_timing_strategy(signal, timing_strategy)
        
        # –°–æ–∑–¥–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–π –≤—Ö–æ–¥
        pending = PendingEntry(
            symbol=symbol,
            direction=signal['direction'],
            signal_price=signal['price'],
            signal_time=datetime.now(),
            signal_data=signal,
            timing_type=timing_type
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
        self._configure_timing_parameters(pending, signal)
        
        self.pending_entries[symbol] = pending
        
        logger.info(f"üïê –î–æ–±–∞–≤–ª–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π –≤—Ö–æ–¥: {symbol} {signal['direction']} "
                   f"(—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {timing_type.value}, —Ü–µ–ª—å: ${pending.pullback_target:.5f})")
        
        return pending
    
    def _determine_timing_strategy(self, signal, strategy_hint):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é timing"""
        if strategy_hint != "auto":
            return EntryTiming(strategy_hint)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–≥–Ω–∞–ª–∞
        signal_type = signal.get('signal_type', '')
        confidence = signal.get('confidence', 0)
        
        # –î–ª—è ML —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–æ–π —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é - –∂–¥–µ–º pullback
        if 'ml_' in signal_type and confidence > 0.8:
            return EntryTiming.PULLBACK
        
        # –î–ª—è —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö RSI - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—Ö–æ–¥
        if 'extreme_rsi' in signal_type:
            return EntryTiming.IMMEDIATE
        
        # –î–ª—è —Å—Ç—Ä–æ–≥–∏—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if 'strict' in signal_type:
            return EntryTiming.PULLBACK
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - pullback
        return EntryTiming.PULLBACK
    
    def _configure_timing_parameters(self, pending, signal):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã timing"""
        if pending.timing_type == EntryTiming.IMMEDIATE:
            pending.target_entry_price = pending.signal_price
            pending.max_wait_minutes = 5  # –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥
            pending.required_confirmations = 1
            
        elif pending.timing_type == EntryTiming.PULLBACK:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ü–µ–ª—å –¥–ª—è pullback
            if pending.direction == 'buy':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏ –∂–¥–µ–º –æ—Ç–∫–∞—Ç –∫ EMA20 –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –Ω–∏–∂–µ
                pullback_distance = pending.signal_price * 0.005  # 0.5% –æ—Ç–∫–∞—Ç
                pending.pullback_target = pending.signal_price - pullback_distance
                pending.target_entry_price = pending.pullback_target
                
            else:  # sell
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏ –∂–¥–µ–º –æ—Ç–±–æ–π –∫ EMA20 –∏–ª–∏ –Ω–µ–º–Ω–æ–≥–æ –≤—ã—à–µ
                pullback_distance = pending.signal_price * 0.005  # 0.5% –æ—Ç–±–æ–π
                pending.pullback_target = pending.signal_price + pullback_distance
                pending.target_entry_price = pending.pullback_target
            
            pending.max_wait_minutes = 60  # –î–∞–µ–º —á–∞—Å –Ω–∞ pullback
            pending.required_confirmations = 2
            
        elif pending.timing_type == EntryTiming.BREAKOUT:
            # –ñ–¥–µ–º –ø—Ä–æ–±–æ–π –∫–ª—é—á–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            if pending.direction == 'buy':
                pending.target_entry_price = pending.signal_price * 1.002  # +0.2%
            else:
                pending.target_entry_price = pending.signal_price * 0.998  # -0.2%
            
            pending.max_wait_minutes = 30
            pending.required_confirmations = 2
    
    async def check_pending_entries(self, api):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –≤—Ö–æ–¥—ã"""
        ready_entries = []
        expired_entries = []
        
        for symbol, pending in list(self.pending_entries.items()):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout
                if datetime.now() > pending.timeout_time:
                    expired_entries.append(symbol)
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
                current_data = await api.get_ohlcv(symbol, 15, 5)
                if current_data.empty:
                    continue
                
                current_price = current_data['close'].iloc[-1]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –≤—Ö–æ–¥–∞
                entry_decision = self._evaluate_entry_conditions(pending, current_data, current_price)
                
                if entry_decision['should_enter']:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
                    pending.signal_data['price'] = entry_decision['entry_price']
                    pending.signal_data['timing_info'] = {
                        'original_signal_price': pending.signal_price,
                        'timing_type': pending.timing_type.value,
                        'wait_time_minutes': (datetime.now() - pending.signal_time).total_seconds() / 60,
                        'confirmations': pending.confirmations_received,
                        'entry_reason': entry_decision['reason']
                    }
                    
                    ready_entries.append(pending.signal_data)
                    expired_entries.append(symbol)  # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
                    
                    logger.info(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –≤—Ö–æ–¥—É: {symbol} {pending.direction} "
                               f"–ø–æ ${entry_decision['entry_price']:.5f} "
                               f"(–ø—Ä–∏—á–∏–Ω–∞: {entry_decision['reason']})")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–∂–∏–¥–∞—é—â–µ–≥–æ –≤—Ö–æ–¥–∞ {symbol}: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –∏—Å—Ç–µ–∫—à–∏–µ
        for symbol in expired_entries:
            if symbol in self.pending_entries:
                pending = self.pending_entries[symbol]
                if symbol not in [entry['symbol'] for entry in ready_entries]:
                    logger.info(f"‚è∞ –ò—Å—Ç–µ–∫ timeout –¥–ª—è {symbol} "
                               f"(–∂–¥–∞–ª–∏ {pending.timing_type.value})")
                del self.pending_entries[symbol]
        
        return ready_entries
    
    def _evaluate_entry_conditions(self, pending, current_data, current_price):
        """–û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è –≤—Ö–æ–¥–∞"""
        if pending.timing_type == EntryTiming.IMMEDIATE:
            return {
                'should_enter': True,
                'entry_price': current_price,
                'reason': 'immediate_entry'
            }
        
        elif pending.timing_type == EntryTiming.PULLBACK:
            return self._check_pullback_conditions(pending, current_data, current_price)
        
        elif pending.timing_type == EntryTiming.BREAKOUT:
            return self._check_breakout_conditions(pending, current_data, current_price)
        
        return {'should_enter': False, 'entry_price': current_price, 'reason': 'no_conditions'}
    
    def _check_pullback_conditions(self, pending, current_data, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è pullback –≤—Ö–æ–¥–∞"""
        try:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º EMA –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            if len(current_data) >= 20:
                ema20 = current_data['close'].ewm(span=20).mean().iloc[-1]
            else:
                ema20 = current_price
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–≤–µ—á–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            recent_highs = current_data['high'].tail(4).values
            recent_lows = current_data['low'].tail(4).values
            recent_volumes = current_data['volume'].tail(4).values
            recent_closes = current_data['close'].tail(4).values
            
            if pending.direction == 'buy':
                # –î–ª—è –ø–æ–∫—É–ø–∫–∏: –∂–¥–µ–º –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –æ–ø—É—Å—Ç–∏—Ç—Å—è –∫ pullback_target
                target_reached = any(low <= pending.pullback_target * (1 + pending.pullback_tolerance) 
                                   for low in recent_lows)
                
                # –ú–∏–∫—Ä–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                confirmations = 0
                
                # 1. –¶–µ–Ω–∞ –∫–∞—Å–∞–µ—Ç—Å—è –∏–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA20
                if current_price <= ema20 * 1.003:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 0.3% –æ—Ç EMA20
                    confirmations += 1
                
                # 2. –û–±—ä–µ–º —Ä–∞—Å—Ç–µ—Ç (–∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π)
                if len(recent_volumes) >= 2 and recent_volumes[-1] > recent_volumes[-2]:
                    confirmations += 1
                
                # 3. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω–∞—è —Å–≤–µ—á–∞ (–∑–µ–ª–µ–Ω–∞—è –ø–æ—Å–ª–µ –∫—Ä–∞—Å–Ω—ã—Ö)
                if (len(recent_closes) >= 2 and 
                    recent_closes[-1] > recent_closes[-2] and
                    recent_closes[-2] < recent_closes[-3]):
                    confirmations += 1
                
                # 4. –¶–µ–Ω–∞ –≤—ã—à–µ –º–∏–Ω–∏–º—É–º–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ (–Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞)
                if len(recent_lows) >= 2 and recent_lows[-1] > recent_lows[-2]:
                    confirmations += 1
                
                pending.confirmations_received = confirmations
                
                if target_reached and confirmations >= pending.required_confirmations:
                    return {
                        'should_enter': True,
                        'entry_price': current_price,
                        'reason': f'pullback_buy_confirmed_{confirmations}'
                    }
            
            else:  # sell
                # –î–ª—è –ø—Ä–æ–¥–∞–∂–∏: –∂–¥–µ–º –∫–æ–≥–¥–∞ —Ü–µ–Ω–∞ –ø–æ–¥–Ω–∏–º–µ—Ç—Å—è –∫ pullback_target
                target_reached = any(high >= pending.pullback_target * (1 - pending.pullback_tolerance)
                                   for high in recent_highs)
                
                # –ú–∏–∫—Ä–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
                confirmations = 0
                
                # 1. –¶–µ–Ω–∞ –∫–∞—Å–∞–µ—Ç—Å—è –∏–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç EMA20
                if current_price >= ema20 * 0.997:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö 0.3% –æ—Ç EMA20
                    confirmations += 1
                
                # 2. –û–±—ä–µ–º —Ä–∞—Å—Ç–µ—Ç (–∏–Ω—Ç–µ—Ä–µ—Å –ø—Ä–æ–¥–∞–≤—Ü–æ–≤)
                if len(recent_volumes) >= 2 and recent_volumes[-1] > recent_volumes[-2]:
                    confirmations += 1
                
                # 3. –§–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è —Ä–∞–∑–≤–æ—Ä–æ—Ç–Ω–∞—è —Å–≤–µ—á–∞ (–∫—Ä–∞—Å–Ω–∞—è –ø–æ—Å–ª–µ –∑–µ–ª–µ–Ω—ã—Ö)
                if (len(recent_closes) >= 2 and 
                    recent_closes[-1] < recent_closes[-2] and
                    recent_closes[-2] > recent_closes[-3]):
                    confirmations += 1
                
                # 4. –¶–µ–Ω–∞ –Ω–∏–∂–µ –º–∞–∫—Å–∏–º—É–º–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Å–≤–µ—á–∏ (–Ω–µ—Ç –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞)
                if len(recent_highs) >= 2 and recent_highs[-1] < recent_highs[-2]:
                    confirmations += 1
                
                pending.confirmations_received = confirmations
                
                if target_reached and confirmations >= pending.required_confirmations:
                    return {
                        'should_enter': True,
                        'entry_price': current_price,
                        'reason': f'pullback_sell_confirmed_{confirmations}'
                    }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pullback —É—Å–ª–æ–≤–∏–π: {str(e)}")
        
        return {'should_enter': False, 'entry_price': current_price, 'reason': 'pullback_waiting'}
    
    def _check_breakout_conditions(self, pending, current_data, current_price):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –¥–ª—è breakout –≤—Ö–æ–¥–∞"""
        try:
            recent_volumes = current_data['volume'].tail(3).values
            
            if pending.direction == 'buy':
                # –ü—Ä–æ–±–æ–π –≤–≤–µ—Ä—Ö —Å –æ–±—ä–µ–º–æ–º
                price_breakout = current_price >= pending.target_entry_price
                volume_confirmation = (len(recent_volumes) >= 2 and 
                                     recent_volumes[-1] > recent_volumes[-2] * 1.2)
                
                if price_breakout and volume_confirmation:
                    return {
                        'should_enter': True,
                        'entry_price': current_price,
                        'reason': 'breakout_buy_confirmed'
                    }
            
            else:  # sell
                # –ü—Ä–æ–±–æ–π –≤–Ω–∏–∑ —Å –æ–±—ä–µ–º–æ–º
                price_breakout = current_price <= pending.target_entry_price
                volume_confirmation = (len(recent_volumes) >= 2 and 
                                     recent_volumes[-1] > recent_volumes[-2] * 1.2)
                
                if price_breakout and volume_confirmation:
                    return {
                        'should_enter': True,
                        'entry_price': current_price,
                        'reason': 'breakout_sell_confirmed'
                    }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ breakout —É—Å–ª–æ–≤–∏–π: {str(e)}")
        
        return {'should_enter': False, 'entry_price': current_price, 'reason': 'breakout_waiting'}
    
    def get_pending_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –≤—Ö–æ–¥–æ–≤"""
        status = []
        for symbol, pending in self.pending_entries.items():
            time_waiting = (datetime.now() - pending.signal_time).total_seconds() / 60
            time_remaining = (pending.timeout_time - datetime.now()).total_seconds() / 60
            
            status.append({
                'symbol': symbol,
                'direction': pending.direction,
                'timing_type': pending.timing_type.value,
                'signal_price': pending.signal_price,
                'target_price': pending.pullback_target,
                'confirmations': f"{pending.confirmations_received}/{pending.required_confirmations}",
                'time_waiting': f"{time_waiting:.1f}min",
                'time_remaining': f"{max(0, time_remaining):.1f}min"
            })
        
        return status
    
    def cancel_pending_entry(self, symbol, reason="manual"):
        """–û—Ç–º–µ–Ω—è–µ—Ç –æ–∂–∏–¥–∞—é—â–∏–π –≤—Ö–æ–¥"""
        if symbol in self.pending_entries:
            pending = self.pending_entries[symbol]
            logger.info(f"‚ùå –û—Ç–º–µ–Ω–µ–Ω –æ–∂–∏–¥–∞—é—â–∏–π –≤—Ö–æ–¥: {symbol} {pending.direction} "
                       f"(–ø—Ä–∏—á–∏–Ω–∞: {reason})")
            del self.pending_entries[symbol]
            return True
        return False
    
    def get_statistics(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ timing"""
        if not self.entry_history:
            return {}
        
        total_entries = len(self.entry_history)
        timing_types = {}
        wait_times = []
        
        for entry in self.entry_history:
            timing_type = entry.get('timing_type', 'unknown')
            timing_types[timing_type] = timing_types.get(timing_type, 0) + 1
            
            if 'wait_time_minutes' in entry:
                wait_times.append(entry['wait_time_minutes'])
        
        return {
            'total_entries': total_entries,
            'timing_distribution': timing_types,
            'average_wait_time': np.mean(wait_times) if wait_times else 0,
            'max_wait_time': max(wait_times) if wait_times else 0,
            'current_pending': len(self.pending_entries)
        }