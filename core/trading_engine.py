# core/trading_engine.py - –í–ï–†–°–ò–Ø –° –£–õ–£–ß–®–ï–ù–ù–´–ú TIMING
"""
–ì–∏–±—Ä–∏–¥–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å –£–ú–ù–´–ú TIMING –í–•–û–î–ê
–≠–¢–ê–ü 1.2: –û–∂–∏–¥–∞–µ–º–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ +15% –∫ –≤–∏–Ω—Ä–µ–π—Ç—É
"""

import pandas as pd
import numpy as np
import logging
from datetime import datetime, time
from ta.momentum import RSIIndicator
from ta.trend import EMAIndicator, MACD
from ta.volatility import AverageTrueRange, BollingerBands

from config import ML_CONFIG, ANTISPAM_CONFIG
from .ml_predictor import MLPredictor
from .level_calculator import SmartLevelCalculator
from .antispam_filter import AntiSpamFilter
from .timing_manager import SmartTimingManager, EntryTiming

logger = logging.getLogger(__name__)

class HybridTradingEngineV2:
    """–¢–æ—Ä–≥–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ —Å ML + —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º + –£–ú–ù–´–ú TIMING"""
    
    def __init__(self, api):
        self.api = api
        self.ml_predictor = MLPredictor()
        self.antispam = AntiSpamFilter()
        self.level_calculator = SmartLevelCalculator()
        self.timing_manager = SmartTimingManager()  # –ù–û–í–´–ô –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        self.ml_enabled = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ timing
        self.timing_stats = {
            'signals_generated': 0,
            'signals_pending': 0,
            'entries_executed': 0,
            'entries_timed_out': 0,
            'timing_improvement': 0
        }
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ML
        if ML_CONFIG['USE_ML_SIGNALS']:
            self.ml_enabled = self.ml_predictor.load_model()
    
    def is_trading_hours(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —á–∞—Å–æ–≤"""
        current_hour = datetime.now().hour
        dangerous_hours = list(range(22, 24)) + list(range(0, 3)) + list(range(6, 9))
        return current_hour not in dangerous_hours
    
    async def analyze_and_generate_signals(self, symbols):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–≥–Ω–∞–ª—ã (–Ω–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç —Å—Ä–∞–∑—É)"""
        new_signals = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ —á–∞—Å—ã
        if not self.is_trading_hours():
            logger.debug(f"–¢–æ—Ä–≥–æ–≤–ª—è –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –≤ —Ç–µ–∫—É—â–∏–π —á–∞—Å: {datetime.now().hour}")
            return new_signals
        
        for symbol in symbols:
            try:
                signal = await self._analyze_single_symbol(symbol)
                if signal and signal.get('direction'):
                    self.timing_stats['signals_generated'] += 1
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é timing
                    timing_strategy = self._select_timing_strategy(signal)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–≥–Ω–∞–ª –≤ –º–µ–Ω–µ–¥–∂–µ—Ä timing –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
                    pending = self.timing_manager.add_signal_for_timing(signal, timing_strategy)
                    self.timing_stats['signals_pending'] += 1
                    
                    logger.info(f"üìä –ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å timing: {symbol} {signal['direction']} "
                               f"(—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: {timing_strategy}, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {signal.get('confidence', 0):.1%})")
                    
                    new_signals.append({
                        'type': 'signal_queued',
                        'signal': signal,
                        'timing_strategy': timing_strategy,
                        'pending_info': pending
                    })
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {str(e)}")
        
        return new_signals
    
    async def check_ready_entries(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—Ö–æ–¥—É —Å–∏–≥–Ω–∞–ª—ã"""
        ready_entries = await self.timing_manager.check_pending_entries(self.api)
        processed_entries = []
        
        for entry_signal in ready_entries:
            try:
                # –ü–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞
                if self._validate_entry_signal(entry_signal):
                    self.timing_stats['entries_executed'] += 1
                    processed_entries.append(entry_signal)
                    
                    logger.info(f"üéØ –ì–û–¢–û–í –ö –í–•–û–î–£: {entry_signal['symbol']} {entry_signal['direction']} "
                               f"–ø–æ ${entry_signal['price']:.5f} "
                               f"(timing: {entry_signal.get('timing_info', {}).get('timing_type', 'unknown')})")
                else:
                    logger.warning(f"‚ö†Ô∏è –°–∏–≥–Ω–∞–ª {entry_signal['symbol']} —É—Å—Ç–∞—Ä–µ–ª –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤—Ö–æ–¥–∞")
            
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Ç–æ–≤–æ–≥–æ –≤—Ö–æ–¥–∞ {entry_signal.get('symbol', 'unknown')}: {str(e)}")
        
        return processed_entries
    
    def _select_timing_strategy(self, signal):
        """–í—ã–±–∏—Ä–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é timing –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞"""
        signal_type = signal.get('signal_type', '')
        confidence = signal.get('confidence', 0)
        rsi = signal.get('technical_signal', {}).get('rsi', 50)
        
        # –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–µ RSI —Å–∏–≥–Ω–∞–ª—ã - –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—Ö–æ–¥ (—Ä—ã–Ω–æ–∫ –º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å—Å—è)
        if 'extreme_rsi' in signal_type:
            return EntryTiming.IMMEDIATE.value
        
        # –í—ã—Å–æ–∫–æ—É–≤–µ—Ä–µ–Ω–Ω—ã–µ ML —Å–∏–≥–Ω–∞–ª—ã - –∂–¥–µ–º pullback –¥–ª—è –ª—É—á—à–µ–π —Ü–µ–Ω—ã
        if confidence > 0.85 and 'ml_' in signal_type:
            return EntryTiming.PULLBACK.value
        
        # –ü—Ä–æ–±–æ–π–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã - –∂–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–æ–±–æ—è
        if ('breakout' in signal_type or 
            (signal['direction'] == 'buy' and rsi > 60) or
            (signal['direction'] == 'sell' and rsi < 40)):
            return EntryTiming.BREAKOUT.value
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - pullback (—Å–∞–º–∞—è –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
        return EntryTiming.PULLBACK.value
    
    def _validate_entry_signal(self, signal):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–∞ –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º"""
        try:
            timing_info = signal.get('timing_info', {})
            wait_time = timing_info.get('wait_time_minutes', 0)
            
            # –ï—Å–ª–∏ –∂–¥–∞–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ - —Å–∏–≥–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω
            if wait_time > 90:  # –ë–æ–ª—å—à–µ 1.5 —á–∞—Å–æ–≤
                logger.debug(f"–°–∏–≥–Ω–∞–ª {signal['symbol']} —É—Å—Ç–∞—Ä–µ–ª (–∂–¥–∞–ª–∏ {wait_time:.1f} –º–∏–Ω)")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –Ω–µ —É—à–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
            original_price = timing_info.get('original_signal_price', signal['price'])
            current_price = signal['price']
            price_deviation = abs(current_price - original_price) / original_price
            
            # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ 2%
            if price_deviation > 0.02:
                logger.debug(f"–¶–µ–Ω–∞ {signal['symbol']} —Å–ª–∏—à–∫–æ–º –æ—Ç–∫–ª–æ–Ω–∏–ª–∞—Å—å: {price_deviation:.1%}")
                return False
            
            return True
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–∞: {str(e)}")
            return False
    
    async def _analyze_single_symbol(self, symbol):
        """–ê–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ (–∫–æ–ø–∏—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ —É–ª—É—á—à–µ–Ω–∏—è–º–∏)"""
        try:
            # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö
            from config import LIMIT
            data_1m = await self.api.get_ohlcv(symbol, 1, min(LIMIT, 100))
            data_15m = await self.api.get_ohlcv(symbol, 15, LIMIT)
            data_30m = await self.api.get_ohlcv(symbol, 30, LIMIT)
            data_1h = await self.api.get_ohlcv(symbol, 60, min(LIMIT//2, 200))
            
            if data_15m.empty or data_30m.empty:
                return None
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
            data_1m = self.generate_technical_indicators(data_1m) if not data_1m.empty else pd.DataFrame()
            data_15m = self.generate_technical_indicators(data_15m)
            data_30m = self.generate_technical_indicators(data_30m)
            data_1h = self.generate_technical_indicators(data_1h) if not data_1h.empty else pd.DataFrame()
            
            # –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞
            current_price = await self.api.get_current_price(symbol)
            if current_price <= 0:
                return None
            
            # –§–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–æ–≤
            if not self.check_volume_filter(data_15m):
                return None
            
            # ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            ml_prediction = None
            if self.ml_enabled:
                ml_prediction = self.ml_predictor.predict(data_15m)
            
            # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
            multi_tf_analysis = self.analyze_multiple_timeframes(data_1m, data_15m, data_30m, data_1h)
            technical_signal = self.generate_strict_technical_signal(data_15m, multi_tf_analysis)
            
            # –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            combined_signal = self.combine_signals_strict(
                symbol=symbol,
                ml_prediction=ml_prediction,
                technical_signal=technical_signal,
                multi_tf_analysis=multi_tf_analysis,
                current_price=current_price,
                data_15m=data_15m
            )
            
            return combined_signal
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {symbol}: {str(e)}")
            return None
    
    # –ú–µ—Ç–æ–¥—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏ (–∫–æ–ø–∏—Ä—É–µ–º –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    def check_volume_filter(self, df):
        """–°—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä –æ–±—ä–µ–º–æ–≤"""
        if df.empty or len(df) < 20:
            return False
        
        try:
            current_volume = df['volume'].iloc[-1]
            avg_volume_20 = df['volume'].rolling(20).mean().iloc[-1]
            volume_ratio = current_volume / avg_volume_20 if avg_volume_20 > 0 else 0
            return volume_ratio >= 1.5
        except:
            return False
    
    def analyze_multiple_timeframes(self, data_1m, data_15m, data_30m, data_1h):
        """–ê–Ω–∞–ª–∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤"""
        analysis = {
            'trend_alignment': 0,
            'momentum_strength': 0,
            'volatility_regime': 'normal',
            'confirmation_count': 0
        }
        
        try:
            timeframes = [('1m', data_1m), ('15m', data_15m), ('30m', data_30m), ('1h', data_1h)]
            trend_scores = []
            momentum_scores = []
            
            for tf_name, df in timeframes:
                if df.empty or len(df) < 50:
                    continue
                
                try:
                    ema20 = df['ema20'].iloc[-1]
                    ema50 = df['ema50'].iloc[-1]
                    close = df['close'].iloc[-1]
                    
                    if pd.isna(ema20) or pd.isna(ema50):
                        continue
                    
                    if ema20 > ema50 * 1.005 and close > ema20:
                        trend_scores.append(1)
                    elif ema20 < ema50 * 0.995 and close < ema20:
                        trend_scores.append(-1)
                    else:
                        trend_scores.append(0)
                    
                    macd_hist = df['macd_hist'].iloc[-1] if 'macd_hist' in df.columns else 0
                    if not pd.isna(macd_hist):
                        momentum_scores.append(abs(macd_hist))
                
                except:
                    continue
            
            if trend_scores:
                analysis['trend_alignment'] = sum(trend_scores)
                analysis['confirmation_count'] = len([t for t in trend_scores if abs(t) > 0])
            
            if momentum_scores:
                analysis['momentum_strength'] = np.mean(momentum_scores)
            
            # –†–µ–∂–∏–º –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
            if not data_15m.empty and 'atr' in data_15m.columns:
                current_atr = data_15m['atr'].iloc[-1]
                avg_atr = data_15m['atr'].rolling(50).mean().iloc[-1]
                
                if not pd.isna(current_atr) and not pd.isna(avg_atr) and avg_atr > 0:
                    atr_ratio = current_atr / avg_atr
                    if atr_ratio > 1.5:
                        analysis['volatility_regime'] = 'high'
                    elif atr_ratio < 0.7:
                        analysis['volatility_regime'] = 'low'
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º—É–ª—å—Ç–∏—Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        
        return analysis
    
    def generate_strict_technical_signal(self, df_15m, multi_tf_analysis):
        """–°—Ç—Ä–æ–≥–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"""
        try:
            if df_15m.empty or len(df_15m) < 50:
                return {'direction': None, 'strength': 0, 'reason': 'insufficient_data'}
            
            last_data = df_15m.iloc[-1]
            
            rsi = last_data.get('rsi', 50.0)
            macd_hist = last_data.get('macd_hist', 0.0)
            bb_upper = last_data.get('bb_upper', last_data['close'] * 1.02)
            bb_lower = last_data.get('bb_lower', last_data['close'] * 0.98)
            close = last_data['close']
            ema20 = last_data.get('ema20', close)
            ema50 = last_data.get('ema50', close)
            
            for var in [rsi, macd_hist, ema20, ema50]:
                if pd.isna(var):
                    return {'direction': None, 'strength': 0, 'reason': 'nan_indicators'}
            
            bb_position = (close - bb_lower) / (bb_upper - bb_lower) if (bb_upper != bb_lower) else 0.5
            
            if multi_tf_analysis['volatility_regime'] == 'high':
                return {'direction': None, 'strength': 0, 'reason': 'high_volatility'}
            
            # –°–¢–†–û–ì–ò–ï CONDITIONS FOR BUY
            buy_conditions = [
                15 <= rsi <= 35,
                multi_tf_analysis['trend_alignment'] >= 2,
                multi_tf_analysis['confirmation_count'] >= 2,
                macd_hist > 0.001,
                bb_position <= 0.3,
                close > ema20 * 0.998,
                ema20 >= ema50 * 0.999,
                multi_tf_analysis['momentum_strength'] >= 0.01
            ]
            
            # –°–¢–†–û–ì–ò–ï CONDITIONS FOR SELL  
            sell_conditions = [
                65 <= rsi <= 85,
                multi_tf_analysis['trend_alignment'] <= -2,
                multi_tf_analysis['confirmation_count'] >= 2,
                macd_hist < -0.001,
                bb_position >= 0.7,
                close < ema20 * 1.002,
                ema20 <= ema50 * 1.001,
                multi_tf_analysis['momentum_strength'] >= 0.01
            ]
            
            buy_score = sum(buy_conditions)
            sell_score = sum(sell_conditions)
            min_conditions = 5
            
            if buy_score >= min_conditions:
                return {
                    'direction': 'buy',
                    'strength': min(buy_score / 7.0 + 0.3, 1.0),
                    'reason': f'strict_buy_{buy_score}/7',
                    'rsi': rsi,
                    'macd_hist': macd_hist,
                    'bb_position': bb_position,
                    'tf_alignment': multi_tf_analysis['trend_alignment'],
                    'conditions_met': buy_score
                }
            
            elif sell_score >= min_conditions:
                return {
                    'direction': 'sell',
                    'strength': min(sell_score / 7.0 + 0.3, 1.0),
                    'reason': f'strict_sell_{sell_score}/7',
                    'rsi': rsi,
                    'macd_hist': macd_hist,
                    'bb_position': bb_position,
                    'tf_alignment': multi_tf_analysis['trend_alignment'],
                    'conditions_met': sell_score
                }
            
            else:
                return {
                    'direction': None,
                    'strength': 0,
                    'reason': f'insufficient_conditions_buy_{buy_score}_sell_{sell_score}',
                    'rsi': rsi,
                    'macd_hist': macd_hist,
                    'bb_position': bb_position,
                    'tf_alignment': multi_tf_analysis['trend_alignment']
                }
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
            return {
                'direction': None,
                'strength': 0,
                'reason': f'error_{str(e)[:50]}',
                'rsi': 50.0,
                'macd_hist': 0.0,
                'bb_position': 0.5,
                'tf_alignment': 0
            }
    
    def combine_signals_strict(self, symbol, ml_prediction, technical_signal, multi_tf_analysis, current_price, data_15m):
        """–°—Ç—Ä–æ–≥–æ–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        signal = {
            'timestamp': datetime.now(),
            'symbol': symbol,
            'price': current_price,
            'direction': None,
            'confidence': 0,
            'signal_type': 'none',
            'ml_prediction': ml_prediction,
            'technical_signal': technical_signal,
            'multi_tf_analysis': multi_tf_analysis,
            'reasoning': []
        }
        
        ml_direction = None
        ml_confidence = 0
        
        if ml_prediction and self.ml_enabled:
            ml_direction = ml_prediction.get('direction')
            ml_confidence = ml_prediction.get('confidence', 0)
        
        tech_direction = technical_signal.get('direction')
        tech_confidence = technical_signal.get('strength', 0)
        
        # –°—Ç—Ä–æ–≥–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if (ml_direction and tech_direction == ml_direction and 
            ml_confidence > ML_CONFIG['CONFIDENCE_THRESHOLD'] and
            tech_confidence >= 0.7):
            
            signal['direction'] = ml_direction
            signal['confidence'] = min(ml_confidence * 0.6 + tech_confidence * 0.4, 0.98)
            signal['signal_type'] = 'ml_tech_perfect_alignment'
            signal['reasoning'].append(f"–ò–î–ï–ê–õ–¨–ù–û–ï –°–û–í–ü–ê–î–ï–ù–ò–ï: ML({ml_confidence:.1%}) + –¢–ê({tech_confidence:.1%})")
            
        elif (ml_direction and ml_confidence > 0.85 and
              multi_tf_analysis['confirmation_count'] >= 2):
            
            signal['direction'] = ml_direction  
            signal['confidence'] = ml_confidence * 0.9
            signal['signal_type'] = 'ml_high_confidence'
            signal['reasoning'].append(f"ML –≤—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {ml_confidence:.1%}")
            
        elif (tech_direction and tech_confidence >= 0.8 and
              ML_CONFIG['FALLBACK_TO_TECHNICAL'] and
              multi_tf_analysis['confirmation_count'] >= 3):
            
            signal['direction'] = tech_direction
            signal['confidence'] = min(tech_confidence * 0.7 + 0.1, 0.8)
            signal['signal_type'] = 'technical_strict'
            signal['reasoning'].append(f"–°–¢–†–û–ì–ò–ô –¢–ê: {tech_confidence:.1%}")
        
        elif not signal['direction']:
            rsi = technical_signal.get('rsi', 50.0)
            tf_alignment = multi_tf_analysis['trend_alignment']
            
            if (rsi < 20 and tf_alignment >= 1 and 
                multi_tf_analysis['momentum_strength'] > 0.02):
                signal['direction'] = 'buy'
                signal['confidence'] = 0.65
                signal['signal_type'] = 'extreme_rsi_oversold'
                signal['reasoning'].append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å: RSI {rsi:.1f}")
                
            elif (rsi > 80 and tf_alignment <= -1 and 
                  multi_tf_analysis['momentum_strength'] > 0.02):
                signal['direction'] = 'sell'
                signal['confidence'] = 0.65
                signal['signal_type'] = 'extreme_rsi_overbought'  
                signal['reasoning'].append(f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å: RSI {rsi:.1f}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª
        if signal['direction']:
            signal = self.level_calculator.calculate_smart_levels(
                signal, 
                data_15m,
                min_rr=2.0,
                target_rr=3.0,
                max_risk_percent=3.0
            )
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–∞
            if not signal.get('skip_reason'):
                if self.antispam.should_send_signal(symbol, signal):
                    self.antispam.register_signal(symbol, signal)
                else:
                    signal['direction'] = None
                    signal['reasoning'].append("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–Ω—Ç–∏—Å–ø–∞–º —Ñ–∏–ª—å—Ç—Ä–æ–º")
            else:
                signal['direction'] = None
        
        return signal
    
    def generate_technical_indicators(self, df):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤"""
        if len(df) < 50:
            return df
        
        try:
            try:
                df['rsi'] = RSIIndicator(df['close'], window=14).rsi()
            except:
                df['rsi'] = 50.0
                
            try:
                df['ema20'] = EMAIndicator(df['close'], window=20).ema_indicator()
                df['ema50'] = EMAIndicator(df['close'], window=50).ema_indicator()
            except:
                df['ema20'] = df['close']
                df['ema50'] = df['close']
            
            try:
                macd = MACD(df['close'])
                df['macd'] = macd.macd()
                df['macd_signal'] = macd.macd_signal()
                df['macd_hist'] = df['macd'] - df['macd_signal']
            except:
                df['macd'] = 0.0
                df['macd_signal'] = 0.0  
                df['macd_hist'] = 0.0
            
            try:
                df['atr'] = AverageTrueRange(df['high'], df['low'], df['close']).average_true_range()
            except:
                df['atr'] = df['close'] * 0.02
            
            try:
                bb = BollingerBands(df['close'], window=20)
                df['bb_upper'] = bb.bollinger_hband()
                df['bb_middle'] = bb.bollinger_mavg()
                df['bb_lower'] = bb.bollinger_lband()
            except:
                df['bb_upper'] = df['close'] * 1.02
                df['bb_middle'] = df['close']
                df['bb_lower'] = df['close'] * 0.98
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: {str(e)}")
        
        return df
    
    def get_timing_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å timing —Å–∏—Å—Ç–µ–º—ã"""
        pending_status = self.timing_manager.get_pending_status()
        timing_stats = self.timing_manager.get_statistics()
        
        return {
            'pending_entries': pending_status,
            'timing_statistics': timing_stats,
            'system_stats': self.timing_stats
        }
    
    def get_detailed_status(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        return {
            'timing_status': self.get_timing_status(),
            'ml_enabled': self.ml_enabled,
            'current_time': datetime.now().isoformat(),
            'trading_hours_active': self.is_trading_hours(),
            'system_statistics': self.timing_stats
        }