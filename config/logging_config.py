import logging
import sys
import os
from datetime import datetime

class UTFFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8 –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –≤—ã–≤–æ–¥–æ–º —ç–º–æ–¥–∑–∏"""
    
    def format(self, record):
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        formatted = super().format(record)
        
        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        emoji_replacements = {
            'üöÄ': '[START]',
            'üìä': '[STATS]',
            '‚öôÔ∏è': '[CONFIG]',
            'üéØ': '[TARGET]',
            '‚è±Ô∏è': '[TIME]',
            'üìà': '[CHART]',
            'üîÑ': '[CYCLE]',
            '‚úÖ': '[OK]',
            '‚ùå': '[ERROR]',
            'ü§ñ': '[ML]',
            'üü¢': '[BUY]',
            'üî¥': '[SELL]',
            'üí∞': '[PRICE]',
            'üõ°Ô∏è': '[STOP]',
            '‚öñÔ∏è': '[RR]',
            'üí∏': '[RISK]',
            'üí≠': '[REASON]',
            'üö´': '[BLOCK]',
            '‚ö†Ô∏è': '[WARN]',
            'üõë': '[STOP]',
            'üéâ': '[SUCCESS]',
            'üèÜ': '[BEST]',
            '‚è∞': '[TIMEOUT]',
            'üîß': '[TECH]',
            'üìÑ': '[REPORT]',
            'üíæ': '[SAVE]',
            'üî•': '[CRITICAL]'
        }
        
        for emoji, replacement in emoji_replacements.items():
            formatted = formatted.replace(emoji, replacement)
        
        return formatted

def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8"""
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    log_dir = 'logs'
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    
    # –ò–º—è —Ñ–∞–π–ª–∞ –ª–æ–≥–∞ —Å –¥–∞—Ç–æ–π
    log_filename = f"{log_dir}/trading_bot_{datetime.now().strftime('%Y%m%d')}.log"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    formatter = UTFFormatter(
        fmt='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º root logger
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    
    # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()
    
    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    file_handler = logging.FileHandler(log_filename, encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)
    
    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatter)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
    if hasattr(sys.stdout, 'reconfigure'):
        try:
            sys.stdout.reconfigure(encoding='utf-8')
        except:
            pass
    
    logger.addHandler(console_handler)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫
    logging.getLogger('aiohttp').setLevel(logging.WARNING)
    logging.getLogger('urllib3').setLevel(logging.WARNING)
    logging.getLogger('asyncio').setLevel(logging.WARNING)
    
    return logger

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
setup_logging()